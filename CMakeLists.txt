cmake_minimum_required(VERSION 3.14)

set(BUILD_SHARED_LIBS off) 
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW) 

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED on)

set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED on)

#set(CMAKE_EXPORT_COMPILE_COMMANDS on)
#set(CMAKE_VERBOSE_MAKEFILE on)

project(from-datkness CXX)

if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE MATCHES "")
    set(CMAKE_BUILD_TYPE ${CMAKE_CONFIGURATION_TYPES})
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
    set(CMAKE_MESSAGE_LOG_LEVEL DEBUG)
else()
    set(CMAKE_MESSAGE_LOG_LEVEL WARNING)
endif()

set(FD_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR})
set(FD_PROJECTS_DIR ${FD_ROOT_DIR}/projects)
set(FD_IMPL_DIR ${FD_ROOT_DIR}/impl)
set(FD_DIR ${FD_IMPL_DIR}/fd)
set(FD_OUT_DIR ${FD_ROOT_DIR}/.out/${CMAKE_BUILD_TYPE})

set(CMAKE_DEBUG_POSTFIX _d)
set(CMAKE_RELEASE_POSTFIX _r)
set(CMAKE_RELWITHDEBINFO_POSTFIX _rd)
set(CMAKE_MINSIZEREL_POSTFIX _rm)

#set(CMAKE_CXX_LINK_OPTIONS_IPO "")
#set(CMAKE_CXX_COMPILE_OPTIONS_IPO "")
#set(CMAKE_CXX_CREATE_STATIC_LIBRARY_IPO "")

include(ProcessorCount)
ProcessorCount(_CPUS)
message(DEBUG "Cpu's count: ${_CPUS}")

if(MSVC)
  # Whole program optimization
  if(NOT CMAKE_BUILD_TYPE MATCHES Debug)
    add_compile_options(/GL
        /Qpar /Qvec-report:1 /Qpar-report:1)
    add_link_options(/LTCG)
  else()
    
  endif()
  add_compile_options(
      /Zc:preprocessor /Zc:__cplusplus /Zc:lambda /permissive-
      /wd5103 /wd4291 /wd4250 /wd5104
      /MP${_CPUS} /EHsc)
  add_link_options(/SAFESEH:NO)
  add_compile_definitions(
      UNICODE
      _UNICODE
      NOMINMAX
      WIN32_LEAN_AND_MEAN
      MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS=0)

  string(REPLACE "Zi" "ZI" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  string(REPLACE "Zi" "ZI" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")

  #set(CMAKE_SHARED_LINKER_FLAGS_DEBUG ${CMAKE_SHARED_LINKER_FLAGS_DEBUG} "/SAFESEH:NO")
  #set(CMAKE_EXE_LINKER_FLAGS_DEBUG ${CMAKE_EXE_LINKER_FLAGS_DEBUG "/SAFESEH:NO")
  #set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO")
  #set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO")

  # Force enable a good many optimizations
  # Aggresive inlining (Release)
  string(REPLACE "Ob2" "Ob3" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
  # Aggresive inlining (RelWithDebInfo)
  string(REPLACE "Ob1" "Ob3" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "O1" "O2" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    # For all objects:
  # - strip unused functions
  # - fold identical functions
  # - link-time code generation
  string(REPLACE "INCREMENTAL" "INCREMENTAL:NO" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "INCREMENTAL" "INCREMENTAL:NO" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
  string(REPLACE "INCREMENTAL" "INCREMENTAL:NO" CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO}")
  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF")
  set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF")
  set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF")
endif()

include(cmake/init.cmake)