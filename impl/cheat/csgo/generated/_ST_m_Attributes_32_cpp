#include "_ST_m_Attributes_32.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

using namespace cheat::csgo;

int& _ST_m_Attributes_32::m_iAttributeDefinitionIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_iAttributeDefinitionIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& _ST_m_Attributes_32::m_iRawValue32( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_iRawValue32");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& _ST_m_Attributes_32::m_flValue( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_flValue");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& _ST_m_Attributes_32::m_iRawInitialValue32( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_iRawInitialValue32");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& _ST_m_Attributes_32::m_nRefundableCurrency( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_nRefundableCurrency");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
bool& _ST_m_Attributes_32::m_bSetBonus( )
{
	static const auto offset = netvars::get_ptr( )->at("_ST_m_Attributes_32", "m_bSetBonus");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
