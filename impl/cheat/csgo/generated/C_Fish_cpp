#include "C_Fish.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_Fish::m_poolOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_poolOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
float& C_Fish::m_x( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_x");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Fish::m_y( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_y");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Fish::m_z( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_z");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Fish::m_angle( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_angle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_Fish::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Fish::m_lifeState( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_lifeState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_Fish::m_waterLevel( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Fish", "m_waterLevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
