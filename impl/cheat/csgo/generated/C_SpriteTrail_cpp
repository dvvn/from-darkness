#include "C_SpriteTrail.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

float& C_SpriteTrail::m_flLifeTime( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flLifeTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpriteTrail::m_flStartWidth( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flStartWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpriteTrail::m_flEndWidth( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flEndWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpriteTrail::m_flStartWidthVariance( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flStartWidthVariance");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpriteTrail::m_flTextureRes( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flTextureRes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpriteTrail::m_flMinFadeLength( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flMinFadeLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
cheat::csgo::Vector& C_SpriteTrail::m_vecSkyboxOrigin( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_vecSkyboxOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
float& C_SpriteTrail::m_flSkyboxScale( )
{
	static const auto offset = netvars::get( )->at("C_SpriteTrail", "m_flSkyboxScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
