#include "C_BaseGrenade.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

float& C_BaseGrenade::m_flDamage( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_flDamage");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_BaseGrenade::m_DmgRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_DmgRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_BaseGrenade::m_bIsLive( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_bIsLive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
cheat::csgo::CBaseHandle& C_BaseGrenade::m_hThrower( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_hThrower");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
cheat::csgo::Vector& C_BaseGrenade::m_vecVelocity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_vecVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_BaseGrenade::m_fFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_fFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
