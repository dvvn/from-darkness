#include "C_TEBloodSprite.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEBloodSprite::m_vecOrigin( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_TEBloodSprite::m_vecDirection( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "m_vecDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_TEBloodSprite::r( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "r");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::g( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "g");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::b( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "b");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::a( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "a");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::m_nSprayModel( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "m_nSprayModel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::m_nDropModel( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "m_nDropModel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEBloodSprite::m_nSize( )
{
	static const auto offset = netvars::get( )->at("C_TEBloodSprite", "m_nSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
