#include "C_Team.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

using namespace cheat::csgo;

int& C_Team::m_iTeamNum( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_iTeamNum");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
bool& C_Team::m_bSurrendered( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_bSurrendered");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
int& C_Team::m_scoreTotal( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_scoreTotal");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_scoreFirstHalf( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_scoreFirstHalf");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_scoreSecondHalf( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_scoreSecondHalf");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_scoreOvertime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_scoreOvertime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_iClanID( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_iClanID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
char* C_Team::m_szTeamname( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_szTeamname");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_Team::m_szClanTeamname( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_szClanTeamname");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_Team::m_szTeamFlagImage( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_szTeamFlagImage");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_Team::m_szTeamLogoImage( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_szTeamLogoImage");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_Team::m_szTeamMatchStat( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_szTeamMatchStat");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
int& C_Team::m_nGGLeaderEntIndex_CT( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_nGGLeaderEntIndex_CT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_nGGLeaderEntIndex_T( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_nGGLeaderEntIndex_T");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::m_numMapVictories( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "m_numMapVictories");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Team::player_array_element( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team", "player_array_element");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
