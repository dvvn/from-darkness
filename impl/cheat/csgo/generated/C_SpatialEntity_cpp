#include "C_SpatialEntity.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_SpatialEntity::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
float& C_SpatialEntity::m_minFalloff( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity", "m_minFalloff");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpatialEntity::m_maxFalloff( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity", "m_maxFalloff");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpatialEntity::m_flCurWeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity", "m_flCurWeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_SpatialEntity::m_bEnabled( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity", "m_bEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
