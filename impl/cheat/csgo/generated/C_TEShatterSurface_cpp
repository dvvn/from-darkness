#include "C_TEShatterSurface.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Color.hpp"
#include "cheat/csgo/QAngle.hpp"
#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEShatterSurface::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::QAngle& C_TEShatterSurface::m_vecAngles( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
}
cheat::csgo::Vector& C_TEShatterSurface::m_vecForce( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecForce");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_TEShatterSurface::m_vecForcePos( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecForcePos");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
float& C_TEShatterSurface::m_flWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEShatterSurface::m_flHeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flHeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEShatterSurface::m_flShardSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flShardSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_TEShatterSurface::m_nSurfaceType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_nSurfaceType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Color& C_TEShatterSurface::m_uchFrontColor( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_uchFrontColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
}
cheat::csgo::Color& C_TEShatterSurface::m_uchBackColor( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_uchBackColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
}
