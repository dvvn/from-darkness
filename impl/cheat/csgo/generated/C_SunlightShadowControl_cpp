#include "C_SunlightShadowControl.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_SunlightShadowControl::m_shadowDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_shadowDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
bool& C_SunlightShadowControl::m_bEnabled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_bEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
char* C_SunlightShadowControl::m_TextureName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_TextureName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
int& C_SunlightShadowControl::m_LightColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_LightColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_SunlightShadowControl::m_flColorTransitionTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_flColorTransitionTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_SunlightShadowControl::m_flSunDistance( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_flSunDistance");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_SunlightShadowControl::m_flFOV( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_flFOV");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_SunlightShadowControl::m_flNearZ( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_flNearZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_SunlightShadowControl::m_flNorthOffset( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_flNorthOffset");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_SunlightShadowControl::m_bEnableShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SunlightShadowControl", "m_bEnableShadows");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
