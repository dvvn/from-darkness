#include "ParticleSmokeGrenade.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

float& ParticleSmokeGrenade::m_flSpawnTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_flSpawnTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& ParticleSmokeGrenade::m_FadeStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_FadeStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& ParticleSmokeGrenade::m_FadeEndTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_FadeEndTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
cheat::csgo::Vector& ParticleSmokeGrenade::m_MinColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_MinColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& ParticleSmokeGrenade::m_MaxColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_MaxColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& ParticleSmokeGrenade::m_CurrentStage( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_CurrentStage");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
