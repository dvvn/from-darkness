#include "C_EnvProjectedTexture.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"

using namespace cheat::csgo;

cheat::csgo::CBaseHandle& C_EnvProjectedTexture::m_hTargetEntity( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_hTargetEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
bool& C_EnvProjectedTexture::m_bState( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_EnvProjectedTexture::m_bAlwaysUpdate( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bAlwaysUpdate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_EnvProjectedTexture::m_flLightFOV( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flLightFOV");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_EnvProjectedTexture::m_bEnableShadows( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bEnableShadows");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_EnvProjectedTexture::m_bSimpleProjection( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bSimpleProjection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_EnvProjectedTexture::m_bLightOnlyTarget( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bLightOnlyTarget");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_EnvProjectedTexture::m_bLightWorld( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bLightWorld");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_EnvProjectedTexture::m_bCameraSpace( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_bCameraSpace");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_EnvProjectedTexture::m_flBrightnessScale( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flBrightnessScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_EnvProjectedTexture::m_LightColor( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_LightColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_EnvProjectedTexture::m_flColorTransitionTime( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flColorTransitionTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EnvProjectedTexture::m_flAmbient( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flAmbient");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
char* C_EnvProjectedTexture::m_SpotlightTextureName( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_SpotlightTextureName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
int& C_EnvProjectedTexture::m_nSpotlightTextureFrame( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_nSpotlightTextureFrame");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_EnvProjectedTexture::m_flNearZ( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flNearZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EnvProjectedTexture::m_flFarZ( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flFarZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_EnvProjectedTexture::m_nShadowQuality( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_nShadowQuality");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_EnvProjectedTexture::m_flProjectionSize( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flProjectionSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EnvProjectedTexture::m_flRotation( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_flRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_EnvProjectedTexture::m_iStyle( )
{
	static const auto offset = netvars::get( )->at("C_EnvProjectedTexture", "m_iStyle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
