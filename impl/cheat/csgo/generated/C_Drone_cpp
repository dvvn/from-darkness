#include "C_Drone.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

cheat::csgo::CBaseHandle& C_Drone::m_hMoveToThisEntity( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_hMoveToThisEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
cheat::csgo::CBaseHandle& C_Drone::m_hDeliveryCargo( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_hDeliveryCargo");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
bool& C_Drone::m_bPilotTakeoverAllowed( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_bPilotTakeoverAllowed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
cheat::csgo::CBaseHandle& C_Drone::m_hPotentialCargo( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_hPotentialCargo");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
cheat::csgo::CBaseHandle& C_Drone::m_hCurrentPilot( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_hCurrentPilot");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
std::array<cheat::csgo::Vector, 24>& C_Drone::m_vecTagPositions( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_vecTagPositions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<cheat::csgo::Vector, 24>>( );
}
std::array<int, 24>& C_Drone::m_vecTagIncrements( )
{
	static const auto offset = netvars::get( )->at("C_Drone", "m_vecTagIncrements");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 24>>( );
}
