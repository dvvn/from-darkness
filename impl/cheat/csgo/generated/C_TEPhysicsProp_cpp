#include "C_TEPhysicsProp.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Color.hpp"
#include "cheat/csgo/QAngle.hpp"
#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEPhysicsProp::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::QAngle& C_TEPhysicsProp::m_angRotation( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_angRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
}
cheat::csgo::Vector& C_TEPhysicsProp::m_vecVelocity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_vecVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_TEPhysicsProp::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEPhysicsProp::m_nFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEPhysicsProp::m_nSkin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nSkin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEPhysicsProp::m_nEffects( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nEffects");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Color& C_TEPhysicsProp::m_clrRender( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_clrRender");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
}
