#include "C_EntityDissolve.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

float& C_EntityDissolve::m_flStartTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeOutStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeOutLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutModelStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeOutModelStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutModelLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeOutModelLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeInStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeInStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeInLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_flFadeInLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_EntityDissolve::m_nDissolveType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_nDissolveType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Vector& C_EntityDissolve::m_vDissolverOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_vDissolverOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_EntityDissolve::m_nMagnitude( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve", "m_nMagnitude");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
