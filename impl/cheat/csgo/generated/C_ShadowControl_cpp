#include "C_ShadowControl.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_ShadowControl::m_shadowDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_shadowDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_ShadowControl::m_shadowColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_shadowColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_ShadowControl::m_flShadowMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_flShadowMaxDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_ShadowControl::m_bDisableShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_bDisableShadows");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_ShadowControl::m_bEnableLocalLightShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_bEnableLocalLightShadows");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
