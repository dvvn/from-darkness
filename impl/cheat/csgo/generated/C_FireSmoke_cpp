#include "C_FireSmoke.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

using namespace cheat::csgo;

float& C_FireSmoke::m_flStartScale( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_flStartScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_FireSmoke::m_flScale( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_flScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_FireSmoke::m_flScaleTime( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_flScaleTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_FireSmoke::m_nFlags( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_nFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_FireSmoke::m_nFlameModelIndex( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_nFlameModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_FireSmoke::m_nFlameFromAboveModelIndex( )
{
	static const auto offset = netvars::get( )->at("C_FireSmoke", "m_nFlameFromAboveModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
