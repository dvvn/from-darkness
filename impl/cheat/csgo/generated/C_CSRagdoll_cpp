#include "C_CSRagdoll.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_CSRagdoll::m_vecOrigin( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_CSRagdoll::m_vecRagdollOrigin( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_vecRagdollOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::CBaseHandle& C_CSRagdoll::m_hPlayer( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_hPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
int& C_CSRagdoll::m_nModelIndex( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_CSRagdoll::m_nForceBone( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_nForceBone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Vector& C_CSRagdoll::m_vecForce( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_vecForce");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_CSRagdoll::m_vecRagdollVelocity( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_vecRagdollVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_CSRagdoll::m_iDeathPose( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_iDeathPose");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_CSRagdoll::m_iDeathFrame( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_iDeathFrame");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_CSRagdoll::m_iTeamNum( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_iTeamNum");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
bool& C_CSRagdoll::m_bClientSideAnimation( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_bClientSideAnimation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_CSRagdoll::m_flDeathYaw( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_flDeathYaw");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_CSRagdoll::m_flAbsYaw( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_flAbsYaw");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_CSRagdoll::m_bDiedAirborne( )
{
	static const auto offset = netvars::get( )->at("C_CSRagdoll", "m_bDiedAirborne");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
