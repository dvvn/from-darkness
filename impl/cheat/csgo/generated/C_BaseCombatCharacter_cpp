#include "C_BaseCombatCharacter.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include <array>

using namespace cheat::csgo;

float& C_BaseCombatCharacter::m_flNextAttack( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flNextAttack");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
std::array<int, 64>& C_BaseCombatCharacter::m_hMyWeapons( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWeapons");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
int& C_BaseCombatCharacter::m_LastHitGroup( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_LastHitGroup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::CBaseHandle& C_BaseCombatCharacter::m_hActiveWeapon( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hActiveWeapon");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
float& C_BaseCombatCharacter::m_flTimeOfLastInjury( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flTimeOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_BaseCombatCharacter::m_nRelativeDirectionOfLastInjury( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_nRelativeDirectionOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
std::array<int, 1>& C_BaseCombatCharacter::m_hMyWearables( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWearables");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 1>>( );
}
