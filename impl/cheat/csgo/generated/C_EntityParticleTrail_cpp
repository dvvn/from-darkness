#include "C_EntityParticleTrail.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"

using namespace cheat::csgo;

int& C_EntityParticleTrail::m_iMaterialName( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityParticleTrail", "m_iMaterialName");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_EntityParticleTrail::m_flLifetime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityParticleTrail", "m_flLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityParticleTrail::m_flStartSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityParticleTrail", "m_flStartSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityParticleTrail::m_flEndSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityParticleTrail", "m_flEndSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
cheat::csgo::CBaseHandle& C_EntityParticleTrail::m_hConstraintEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityParticleTrail", "m_hConstraintEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
