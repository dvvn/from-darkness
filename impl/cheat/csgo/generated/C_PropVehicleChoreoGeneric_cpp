#include "C_PropVehicleChoreoGeneric.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::CBaseHandle& C_PropVehicleChoreoGeneric::m_hPlayer( )
{
	static const auto offset = netvars::get( )->at("C_PropVehicleChoreoGeneric", "m_hPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
bool& C_PropVehicleChoreoGeneric::m_bEnterAnimOn( )
{
	static const auto offset = netvars::get( )->at("C_PropVehicleChoreoGeneric", "m_bEnterAnimOn");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_PropVehicleChoreoGeneric::m_bExitAnimOn( )
{
	static const auto offset = netvars::get( )->at("C_PropVehicleChoreoGeneric", "m_bExitAnimOn");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_PropVehicleChoreoGeneric::m_bForceEyesToAttachment( )
{
	static const auto offset = netvars::get( )->at("C_PropVehicleChoreoGeneric", "m_bForceEyesToAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
cheat::csgo::Vector& C_PropVehicleChoreoGeneric::m_vecEyeExitEndpoint( )
{
	static const auto offset = netvars::get( )->at("C_PropVehicleChoreoGeneric", "m_vecEyeExitEndpoint");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
