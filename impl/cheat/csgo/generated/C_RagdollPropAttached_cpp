#include "C_RagdollPropAttached.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

int& C_RagdollPropAttached::m_boneIndexAttached( )
{
	static const auto offset = netvars::get_ptr( )->at("C_RagdollPropAttached", "m_boneIndexAttached");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_RagdollPropAttached::m_ragdollAttachedObjectIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_RagdollPropAttached", "m_ragdollAttachedObjectIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Vector& C_RagdollPropAttached::m_attachmentPointBoneSpace( )
{
	static const auto offset = netvars::get_ptr( )->at("C_RagdollPropAttached", "m_attachmentPointBoneSpace");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_RagdollPropAttached::m_attachmentPointRagdollSpace( )
{
	static const auto offset = netvars::get_ptr( )->at("C_RagdollPropAttached", "m_attachmentPointRagdollSpace");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
