#include "C_TEDynamicLight.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEDynamicLight::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_TEDynamicLight::r( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "r");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEDynamicLight::g( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "g");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEDynamicLight::b( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "b");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEDynamicLight::exponent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "exponent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_TEDynamicLight::m_fRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEDynamicLight::m_fTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEDynamicLight::m_fDecay( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fDecay");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
