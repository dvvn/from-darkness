#include "C_CSGameRulesProxy.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

bool& C_CSGameRulesProxy::m_bFreezePeriod( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bFreezePeriod");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bMatchWaitingForResume( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bMatchWaitingForResume");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bWarmupPeriod( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bWarmupPeriod");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_CSGameRulesProxy::m_fWarmupPeriodEnd( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_fWarmupPeriodEnd");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_fWarmupPeriodStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_fWarmupPeriodStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_CSGameRulesProxy::m_bTerroristTimeOutActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bTerroristTimeOutActive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bCTTimeOutActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bCTTimeOutActive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_CSGameRulesProxy::m_flTerroristTimeOutRemaining( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flTerroristTimeOutRemaining");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flCTTimeOutRemaining( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flCTTimeOutRemaining");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_CSGameRulesProxy::m_nTerroristTimeOuts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nTerroristTimeOuts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_nCTTimeOuts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nCTTimeOuts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bTechnicalTimeOut( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bTechnicalTimeOut");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_iRoundTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iRoundTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_gamePhase( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_gamePhase");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_totalRoundsPlayed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_totalRoundsPlayed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_nOvertimePlaying( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nOvertimePlaying");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_CSGameRulesProxy::m_timeUntilNextPhaseStarts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_timeUntilNextPhaseStarts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flCMMItemDropRevealStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flCMMItemDropRevealStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flCMMItemDropRevealEndTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flCMMItemDropRevealEndTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_fRoundStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_fRoundStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_CSGameRulesProxy::m_bGameRestart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bGameRestart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_CSGameRulesProxy::m_flRestartRoundTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flRestartRoundTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flGameStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flGameStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_CSGameRulesProxy::m_iHostagesRemaining( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iHostagesRemaining");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bAnyHostageReached( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bAnyHostageReached");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bMapHasBombTarget( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bMapHasBombTarget");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bMapHasRescueZone( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bMapHasRescueZone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bMapHasBuyZone( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bMapHasBuyZone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bIsQueuedMatchmaking( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bIsQueuedMatchmaking");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_nQueuedMatchmakingMode( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nQueuedMatchmakingMode");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bIsValveDS( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bIsValveDS");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bIsQuestEligible( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bIsQuestEligible");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bLogoMap( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bLogoMap");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bPlayAllStepSoundsOnServer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bPlayAllStepSoundsOnServer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_iNumGunGameProgressiveWeaponsCT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iNumGunGameProgressiveWeaponsCT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_iNumGunGameProgressiveWeaponsT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iNumGunGameProgressiveWeaponsT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_iSpectatorSlotCount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iSpectatorSlotCount");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bBombDropped( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bBombDropped");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bBombPlanted( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bBombPlanted");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_iRoundWinStatus( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iRoundWinStatus");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_eRoundWinReason( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_eRoundWinReason");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_CSGameRulesProxy::m_flDMBonusStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flDMBonusStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flDMBonusTimeLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flDMBonusTimeLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
unsigned int& C_CSGameRulesProxy::m_unDMBonusWeaponLoadoutSlot( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(unsigned int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_unDMBonusWeaponLoadoutSlot");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bDMBonusActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bDMBonusActive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bTCantBuy( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bTCantBuy");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bCTCantBuy( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bCTCantBuy");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_CSGameRulesProxy::m_flGuardianBuyUntilTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flGuardianBuyUntilTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<int, 30>& C_CSGameRulesProxy::m_iMatchStats_RoundResults( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 30>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iMatchStats_RoundResults");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 30>>( );
#endif
}
std::array<int, 30>& C_CSGameRulesProxy::m_iMatchStats_PlayersAlive_T( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 30>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iMatchStats_PlayersAlive_T");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 30>>( );
#endif
}
std::array<int, 30>& C_CSGameRulesProxy::m_iMatchStats_PlayersAlive_CT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 30>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iMatchStats_PlayersAlive_CT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 30>>( );
#endif
}
std::array<int, 60>& C_CSGameRulesProxy::m_GGProgressiveWeaponOrderCT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 60>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_GGProgressiveWeaponOrderCT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 60>>( );
#endif
}
std::array<int, 60>& C_CSGameRulesProxy::m_GGProgressiveWeaponOrderT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 60>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_GGProgressiveWeaponOrderT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 60>>( );
#endif
}
std::array<int, 60>& C_CSGameRulesProxy::m_GGProgressiveWeaponKillUpgradeOrderCT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 60>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_GGProgressiveWeaponKillUpgradeOrderCT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 60>>( );
#endif
}
std::array<int, 60>& C_CSGameRulesProxy::m_GGProgressiveWeaponKillUpgradeOrderT( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 60>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_GGProgressiveWeaponKillUpgradeOrderT");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 60>>( );
#endif
}
int& C_CSGameRulesProxy::m_MatchDevice( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_MatchDevice");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bHasMatchStarted( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bHasMatchStarted");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
std::array<float, 32>& C_CSGameRulesProxy::m_TeamRespawnWaveTimes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_TeamRespawnWaveTimes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 32>>( );
#endif
}
std::array<float, 32>& C_CSGameRulesProxy::m_flNextRespawnWave( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flNextRespawnWave");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 32>>( );
#endif
}
int& C_CSGameRulesProxy::m_nNextMapInMapgroup( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nNextMapInMapgroup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 10>& C_CSGameRulesProxy::m_nEndMatchMapGroupVoteTypes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 10>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nEndMatchMapGroupVoteTypes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 10>>( );
#endif
}
std::array<int, 10>& C_CSGameRulesProxy::m_nEndMatchMapGroupVoteOptions( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 10>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nEndMatchMapGroupVoteOptions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 10>>( );
#endif
}
int& C_CSGameRulesProxy::m_nEndMatchMapVoteWinner( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nEndMatchMapVoteWinner");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bIsDroppingItems( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bIsDroppingItems");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_iActiveAssassinationTargetMissionID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iActiveAssassinationTargetMissionID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_CSGameRulesProxy::m_fMatchStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_fMatchStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
char* C_CSGameRulesProxy::m_szTournamentEventName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_szTournamentEventName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_CSGameRulesProxy::m_szTournamentEventStage( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_szTournamentEventStage");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_CSGameRulesProxy::m_szTournamentPredictionsTxt( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_szTournamentPredictionsTxt");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
int& C_CSGameRulesProxy::m_nTournamentPredictionsPct( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nTournamentPredictionsPct");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
char* C_CSGameRulesProxy::m_szMatchStatTxt( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_szMatchStatTxt");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
int& C_CSGameRulesProxy::m_nGuardianModeWaveNumber( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nGuardianModeWaveNumber");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_nGuardianModeSpecialKillsRemaining( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nGuardianModeSpecialKillsRemaining");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_nGuardianModeSpecialWeaponNeeded( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nGuardianModeSpecialWeaponNeeded");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_nHalloweenMaskListSeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nHalloweenMaskListSeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_numGlobalGiftsGiven( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_numGlobalGiftsGiven");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_numGlobalGifters( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_numGlobalGifters");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_numGlobalGiftsPeriodSeconds( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_numGlobalGiftsPeriodSeconds");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 4>& C_CSGameRulesProxy::m_arrFeaturedGiftersAccounts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_arrFeaturedGiftersAccounts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 4>& C_CSGameRulesProxy::m_arrFeaturedGiftersGifts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_arrFeaturedGiftersGifts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 100>& C_CSGameRulesProxy::m_arrProhibitedItemIndices( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 100>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_arrProhibitedItemIndices");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 100>>( );
#endif
}
int& C_CSGameRulesProxy::m_numBestOfMaps( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_numBestOfMaps");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 4>& C_CSGameRulesProxy::m_arrTournamentActiveCasterAccounts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_arrTournamentActiveCasterAccounts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
int& C_CSGameRulesProxy::m_iNumConsecutiveCTLoses( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iNumConsecutiveCTLoses");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_iNumConsecutiveTerroristLoses( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iNumConsecutiveTerroristLoses");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_CSGameRulesProxy::m_vecPlayAreaMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_vecPlayAreaMins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_CSGameRulesProxy::m_vecPlayAreaMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_vecPlayAreaMaxs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
std::array<int, 64>& C_CSGameRulesProxy::m_iPlayerSpawnHexIndices( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 64>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iPlayerSpawnHexIndices");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
#endif
}
std::array<int, 224>& C_CSGameRulesProxy::m_SpawnTileState( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 224>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_SpawnTileState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 224>>( );
#endif
}
float& C_CSGameRulesProxy::m_flSpawnSelectionTimeStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flSpawnSelectionTimeStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flSpawnSelectionTimeEnd( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flSpawnSelectionTimeEnd");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flSpawnSelectionTimeLoadout( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flSpawnSelectionTimeLoadout");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_CSGameRulesProxy::m_spawnStage( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_spawnStage");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_CSGameRulesProxy::m_flTabletHexOriginX( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flTabletHexOriginX");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flTabletHexOriginY( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flTabletHexOriginY");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_CSGameRulesProxy::m_flTabletHexSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flTabletHexSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<__int64, 65>& C_CSGameRulesProxy::m_roundData_playerXuids( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<__int64, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_roundData_playerXuids");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<__int64, 65>>( );
#endif
}
std::array<int, 65>& C_CSGameRulesProxy::m_roundData_playerPositions( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_roundData_playerPositions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSGameRulesProxy::m_roundData_playerTeams( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_roundData_playerTeams");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 16>& C_CSGameRulesProxy::m_SurvivalGameRuleDecisionTypes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 16>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_SurvivalGameRuleDecisionTypes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 16>>( );
#endif
}
std::array<int, 16>& C_CSGameRulesProxy::m_SurvivalGameRuleDecisionValues( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 16>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_SurvivalGameRuleDecisionValues");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 16>>( );
#endif
}
float& C_CSGameRulesProxy::m_flSurvivalStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_flSurvivalStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_CSGameRulesProxy::m_nMatchSeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_nMatchSeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_CSGameRulesProxy::m_bBlockersPresent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bBlockersPresent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CSGameRulesProxy::m_bRoundInProgress( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_bRoundInProgress");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CSGameRulesProxy::m_iFirstSecondHalfRound( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iFirstSecondHalfRound");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSGameRulesProxy::m_iBombSite( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSGameRulesProxy", "m_iBombSite");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
