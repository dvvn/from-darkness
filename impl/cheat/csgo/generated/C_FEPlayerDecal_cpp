#include "C_FEPlayerDecal.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

int& C_FEPlayerDecal::m_nUniqueID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nUniqueID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
unsigned int& C_FEPlayerDecal::m_unAccountID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(unsigned int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_unAccountID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned int>( );
#endif
}
unsigned int& C_FEPlayerDecal::m_unTraceID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(unsigned int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_unTraceID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned int>( );
#endif
}
int& C_FEPlayerDecal::m_rtGcTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_rtGcTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_FEPlayerDecal::m_vecEndPos( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_vecEndPos");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_FEPlayerDecal::m_vecStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_vecStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_FEPlayerDecal::m_vecRight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_vecRight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_FEPlayerDecal::m_vecNormal( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_vecNormal");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_FEPlayerDecal::m_nEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_FEPlayerDecal::m_nPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_FEPlayerDecal::m_nHitbox( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nHitbox");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_FEPlayerDecal::m_nTintID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nTintID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_FEPlayerDecal::m_flCreationTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_flCreationTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_FEPlayerDecal::m_nVersion( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_nVersion");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 128>& C_FEPlayerDecal::m_ubSignature( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 128>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FEPlayerDecal", "m_ubSignature");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 128>>( );
#endif
}
