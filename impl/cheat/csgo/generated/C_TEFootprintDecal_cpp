#include "C_TEFootprintDecal.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEFootprintDecal::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_TEFootprintDecal::m_vecDirection( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_vecDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_TEFootprintDecal::m_nEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_nEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFootprintDecal::m_nIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_nIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
unsigned char& C_TEFootprintDecal::m_chMaterialType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_chMaterialType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned char>( );
}
