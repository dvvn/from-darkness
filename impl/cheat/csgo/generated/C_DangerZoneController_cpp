#include "C_DangerZoneController.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

bool& C_DangerZoneController::m_bDangerZoneControllerEnabled( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_bDangerZoneControllerEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_DangerZoneController::m_bMissionControlledExplosions( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_bMissionControlledExplosions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_DangerZoneController::m_flStartTime( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_flStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_DangerZoneController::m_flFinalExpansionTime( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_flFinalExpansionTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
cheat::csgo::Vector& C_DangerZoneController::m_vecEndGameCircleStart( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_vecEndGameCircleStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_DangerZoneController::m_vecEndGameCircleEnd( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_vecEndGameCircleEnd");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
std::array<int, 42>& C_DangerZoneController::m_DangerZones( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_DangerZones");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 42>>( );
}
std::array<float, 5>& C_DangerZoneController::m_flWaveEndTimes( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_flWaveEndTimes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 5>>( );
}
cheat::csgo::CBaseHandle& C_DangerZoneController::m_hTheFinalZone( )
{
	static const auto offset = netvars::get( )->at("C_DangerZoneController", "m_hTheFinalZone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
}
