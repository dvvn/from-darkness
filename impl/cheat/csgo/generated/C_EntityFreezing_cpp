#include "C_EntityFreezing.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

cheat::csgo::Vector& C_EntityFreezing::m_vFreezingOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityFreezing", "m_vFreezingOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
std::array<float, 50>& C_EntityFreezing::m_flFrozenPerHitbox( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 50>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityFreezing", "m_flFrozenPerHitbox");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 50>>( );
#endif
}
float& C_EntityFreezing::m_flFrozen( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityFreezing", "m_flFrozen");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_EntityFreezing::m_bFinishFreezing( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityFreezing", "m_bFinishFreezing");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
