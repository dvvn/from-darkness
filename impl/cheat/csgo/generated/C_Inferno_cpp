#include "C_Inferno.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include <array>

using namespace cheat::csgo;

std::array<int, 100>& C_Inferno::m_fireXDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_fireXDelta");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 100>>( );
}
std::array<int, 100>& C_Inferno::m_fireYDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_fireYDelta");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 100>>( );
}
std::array<int, 100>& C_Inferno::m_fireZDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_fireZDelta");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 100>>( );
}
std::array<int, 100>& C_Inferno::m_bFireIsBurning( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_bFireIsBurning");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 100>>( );
}
int& C_Inferno::m_nFireEffectTickBegin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_nFireEffectTickBegin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_Inferno::m_fireCount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno", "m_fireCount");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
