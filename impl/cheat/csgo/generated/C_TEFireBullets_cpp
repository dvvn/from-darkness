#include "C_TEFireBullets.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEFireBullets::m_vecOrigin( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
std::array<float, 2>& C_TEFireBullets::m_vecAngles( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_vecAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 2>>( );
}
int& C_TEFireBullets::m_iWeaponID( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_iWeaponID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFireBullets::m_weapon( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_weapon");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFireBullets::m_iMode( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_iMode");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFireBullets::m_iSeed( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_iSeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFireBullets::m_iPlayer( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_iPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_TEFireBullets::m_fInaccuracy( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_fInaccuracy");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEFireBullets::m_fSpread( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_fSpread");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
int& C_TEFireBullets::m_nItemDefIndex( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_nItemDefIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEFireBullets::m_iSoundType( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_iSoundType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
float& C_TEFireBullets::m_flRecoilIndex( )
{
	static const auto offset = netvars::get( )->at("C_TEFireBullets", "m_flRecoilIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
