#include "C_WorldVguiText.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Color.hpp"

using namespace cheat::csgo;

bool& C_WorldVguiText::m_bEnabled( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_bEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
char* C_WorldVguiText::m_szDisplayText( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_szDisplayText");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_WorldVguiText::m_szDisplayTextOption( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_szDisplayTextOption");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
char* C_WorldVguiText::m_szFont( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_szFont");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
int& C_WorldVguiText::m_iTextPanelWidth( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_iTextPanelWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
cheat::csgo::Color& C_WorldVguiText::m_clrText( )
{
	static const auto offset = netvars::get( )->at("C_WorldVguiText", "m_clrText");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
}
