#include "C_BaseTeamObjectiveResource.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

int& C_BaseTeamObjectiveResource::m_iTimerToShowInHUD( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTimerToShowInHUD");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_BaseTeamObjectiveResource::m_iStopWatchTimer( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iStopWatchTimer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_BaseTeamObjectiveResource::m_iNumControlPoints( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iNumControlPoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
bool& C_BaseTeamObjectiveResource::m_bPlayingMiniRounds( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bPlayingMiniRounds");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_BaseTeamObjectiveResource::m_bControlPointsReset( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bControlPointsReset");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
int& C_BaseTeamObjectiveResource::m_iUpdateCapHudParity( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iUpdateCapHudParity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
std::array<cheat::csgo::Vector, 8>& C_BaseTeamObjectiveResource::m_vCPPositions( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_vCPPositions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<cheat::csgo::Vector, 8>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_bCPIsVisible( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bCPIsVisible");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<float, 8>& C_BaseTeamObjectiveResource::m_flLazyCapPerc( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_flLazyCapPerc");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 8>>( );
}
std::array<int, 64>& C_BaseTeamObjectiveResource::m_iTeamIcons( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTeamIcons");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
std::array<int, 64>& C_BaseTeamObjectiveResource::m_iTeamOverlays( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTeamOverlays");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
std::array<int, 64>& C_BaseTeamObjectiveResource::m_iTeamReqCappers( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTeamReqCappers");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
std::array<float, 64>& C_BaseTeamObjectiveResource::m_flTeamCapTime( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_flTeamCapTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 64>>( );
}
std::array<int, 192>& C_BaseTeamObjectiveResource::m_iPreviousPoints( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iPreviousPoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 192>>( );
}
std::array<int, 64>& C_BaseTeamObjectiveResource::m_bTeamCanCap( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bTeamCanCap");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
std::array<int, 32>& C_BaseTeamObjectiveResource::m_iTeamBaseIcons( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTeamBaseIcons");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 32>>( );
}
std::array<int, 32>& C_BaseTeamObjectiveResource::m_iBaseControlPoints( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iBaseControlPoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 32>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_bInMiniRound( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bInMiniRound");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_iWarnOnCap( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iWarnOnCap");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<char*, 8>& C_BaseTeamObjectiveResource::m_iszWarnSound( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iszWarnSound");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<char*, 8>>( );
}
std::array<float, 8>& C_BaseTeamObjectiveResource::m_flPathDistance( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_flPathDistance");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 8>>( );
}
std::array<int, 64>& C_BaseTeamObjectiveResource::m_iNumTeamMembers( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iNumTeamMembers");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_iCappingTeam( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iCappingTeam");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_iTeamInZone( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iTeamInZone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_bBlocked( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_bBlocked");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
std::array<int, 8>& C_BaseTeamObjectiveResource::m_iOwner( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_iOwner");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 8>>( );
}
char* C_BaseTeamObjectiveResource::m_pszCapLayoutInHUD( )
{
	static const auto offset = netvars::get( )->at("C_BaseTeamObjectiveResource", "m_pszCapLayoutInHUD");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
}
