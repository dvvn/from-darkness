#include "SporeExplosion.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

using namespace cheat::csgo;

float& SporeExplosion::m_flSpawnRate( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_flSpawnRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flParticleLifetime( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_flParticleLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flStartSize( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_flStartSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flEndSize( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_flEndSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flSpawnRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_flSpawnRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
}
bool& SporeExplosion::m_bEmit( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_bEmit");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& SporeExplosion::m_bDontRemove( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion", "m_bDontRemove");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
}
