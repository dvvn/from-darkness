#include "C_BaseAnimating.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/csgo/CBaseHandle.hpp"
#include "cheat/csgo/CUtlVector.hpp"
#include "cheat/csgo/Vector.hpp"
#include <array>

using namespace cheat::csgo;

int& C_BaseAnimating::m_nSequence( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nSequence");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nForceBone( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nForceBone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_BaseAnimating::m_vecForce( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_vecForce");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_BaseAnimating::m_nSkin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nSkin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nBody( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nBody");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nHitboxSet( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nHitboxSet");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_BaseAnimating::m_flModelScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flModelScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<float, 24>& C_BaseAnimating::m_flPoseParameter( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 24>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flPoseParameter");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 24>>( );
#endif
}
float& C_BaseAnimating::m_flPlaybackRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flPlaybackRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<float, 4>& C_BaseAnimating::m_flEncodedController( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flEncodedController");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 4>>( );
#endif
}
bool& C_BaseAnimating::m_bClientSideAnimation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_bClientSideAnimation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseAnimating::m_bClientSideFrameReset( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_bClientSideFrameReset");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseAnimating::m_bClientSideRagdoll( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_bClientSideRagdoll");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_BaseAnimating::m_nNewSequenceParity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nNewSequenceParity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nResetEventsParity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nResetEventsParity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nMuzzleFlashParity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nMuzzleFlashParity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseAnimating::m_hLightingOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_hLightingOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
float& C_BaseAnimating::m_flCycle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flCycle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseAnimating::m_flFrozen( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flFrozen");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseAnimating::m_ScaleType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_ScaleType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_BaseAnimating::m_bSuppressAnimSounds( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_bSuppressAnimSounds");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_BaseAnimating::m_nHighlightColorR( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nHighlightColorR");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nHighlightColorG( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nHighlightColorG");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseAnimating::m_nHighlightColorB( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_nHighlightColorB");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::CUtlVector<cheat::csgo::CAnimationLayer>& C_BaseAnimating::m_AnimOverlays( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CUtlVector<cheat::csgo::CAnimationLayer>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_AnimOverlays");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CUtlVector<cheat::csgo::CAnimationLayer>>( );
#endif
}
float& C_BaseAnimating::m_flLastBoneSetupTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_flLastBoneSetupTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseAnimating::m_iMostRecentModelBoneCounter( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAnimating", "m_iMostRecentModelBoneCounter");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
