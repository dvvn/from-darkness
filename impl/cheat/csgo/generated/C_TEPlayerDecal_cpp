#include "C_TEPlayerDecal.h"
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>

#include "cheat/csgo/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEPlayerDecal::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_TEPlayerDecal::m_vecStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_vecStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
cheat::csgo::Vector& C_TEPlayerDecal::m_vecRight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_vecRight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
}
int& C_TEPlayerDecal::m_nEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_nEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEPlayerDecal::m_nPlayer( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_nPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
int& C_TEPlayerDecal::m_nHitbox( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal", "m_nHitbox");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
}
