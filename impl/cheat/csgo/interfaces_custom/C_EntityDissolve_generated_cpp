float& C_EntityDissolve::m_flStartTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flStartTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeOutStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeOutStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeOutLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeOutLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeOutModelStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeOutModelStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeOutModelLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeOutModelLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeInStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeInStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EntityDissolve::m_flFadeInLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_flFadeInLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EntityDissolve::m_nDissolveType( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_nDissolveType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_EntityDissolve::m_vDissolverOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_vDissolverOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EntityDissolve::m_nMagnitude( )
{
	static const auto offset = cheat::get_netvar_offset("C_EntityDissolve", "m_nMagnitude");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

