float& C_BaseGrenade::m_flDamage( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_flDamage");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_BaseGrenade::m_DmgRadius( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_DmgRadius");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_BaseGrenade::m_bIsLive( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_bIsLive");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_BaseGrenade::m_hThrower( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_hThrower");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_BaseGrenade::m_vecVelocity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_vecVelocity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseGrenade::m_fFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseGrenade", "m_fFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

