int& C_WeaponCSBase::m_weaponMode( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_weaponMode");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_WeaponCSBase::m_fAccuracyPenalty( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_fAccuracyPenalty");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_WeaponCSBase::m_fLastShotTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_fLastShotTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_WeaponCSBase::m_iRecoilIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_iRecoilIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_WeaponCSBase::m_flRecoilIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_flRecoilIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_WeaponCSBase::m_hPrevOwner( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_hPrevOwner");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_WeaponCSBase::m_bBurstMode( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_bBurstMode");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_WeaponCSBase::m_flPostponeFireReadyTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_flPostponeFireReadyTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_WeaponCSBase::m_bReloadVisuallyComplete( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_bReloadVisuallyComplete");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_WeaponCSBase::m_bSilencerOn( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_bSilencerOn");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_WeaponCSBase::m_flDoneSwitchingSilencer( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_flDoneSwitchingSilencer");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_WeaponCSBase::m_iOriginalTeamNumber( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_iOriginalTeamNumber");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_WeaponCSBase::m_iIronSightMode( )
{
	static const auto offset = cheat::get_netvar_offset("C_WeaponCSBase", "m_iIronSightMode");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

