bool& C_SlideshowDisplay::m_bEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_bEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_SlideshowDisplay::m_szDisplayText( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_szDisplayText");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_SlideshowDisplay::m_szSlideshowDirectory( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_szSlideshowDirectory");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

std::array<int, 16>& C_SlideshowDisplay::m_chCurrentSlideLists( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_chCurrentSlideLists");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SlideshowDisplay::m_fMinSlideTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_fMinSlideTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SlideshowDisplay::m_fMaxSlideTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_fMaxSlideTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_SlideshowDisplay::m_iCycleType( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_iCycleType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SlideshowDisplay::m_bNoListRepeats( )
{
	static const auto offset = cheat::get_netvar_offset("C_SlideshowDisplay", "m_bNoListRepeats");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

