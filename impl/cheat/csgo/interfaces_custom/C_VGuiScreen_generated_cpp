float& C_VGuiScreen::m_flWidth( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_flWidth");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_VGuiScreen::m_flHeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_flHeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_VGuiScreen::m_fScreenFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_fScreenFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_VGuiScreen::m_nPanelName( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_nPanelName");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_VGuiScreen::m_nAttachmentIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_nAttachmentIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_VGuiScreen::m_nOverlayMaterial( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_nOverlayMaterial");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_VGuiScreen::m_hPlayerOwner( )
{
	static const auto offset = cheat::get_netvar_offset("C_VGuiScreen", "m_hPlayerOwner");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

