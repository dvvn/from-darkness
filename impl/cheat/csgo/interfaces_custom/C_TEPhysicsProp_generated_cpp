cheat::csgo::Vector& C_TEPhysicsProp::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::QAngle& C_TEPhysicsProp::m_angRotation( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_angRotation");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEPhysicsProp::m_vecVelocity( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_vecVelocity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPhysicsProp::m_nModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_nModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPhysicsProp::m_nFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_nFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPhysicsProp::m_nSkin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_nSkin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPhysicsProp::m_nEffects( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_nEffects");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Color& C_TEPhysicsProp::m_clrRender( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPhysicsProp", "m_clrRender");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

