bool& C_WorldVguiText::m_bEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_bEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_WorldVguiText::m_szDisplayText( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_szDisplayText");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_WorldVguiText::m_szDisplayTextOption( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_szDisplayTextOption");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_WorldVguiText::m_szFont( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_szFont");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

int& C_WorldVguiText::m_iTextPanelWidth( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_iTextPanelWidth");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Color& C_WorldVguiText::m_clrText( )
{
	static const auto offset = cheat::get_netvar_offset("C_WorldVguiText", "m_clrText");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

