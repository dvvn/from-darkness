cheat::csgo::Vector& C_TEDynamicLight::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEDynamicLight::r( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "r");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEDynamicLight::g( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "g");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEDynamicLight::b( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "b");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEDynamicLight::exponent( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "exponent");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEDynamicLight::m_fRadius( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "m_fRadius");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEDynamicLight::m_fTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "m_fTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEDynamicLight::m_fDecay( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEDynamicLight", "m_fDecay");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

