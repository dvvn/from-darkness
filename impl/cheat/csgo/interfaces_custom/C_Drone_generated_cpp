cheat::csgo::CBaseHandle& C_Drone::m_hMoveToThisEntity( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_hMoveToThisEntity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_Drone::m_hDeliveryCargo( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_hDeliveryCargo");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_Drone::m_bPilotTakeoverAllowed( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_bPilotTakeoverAllowed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_Drone::m_hPotentialCargo( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_hPotentialCargo");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_Drone::m_hCurrentPilot( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_hCurrentPilot");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<cheat::csgo::Vector, 24>& C_Drone::m_vecTagPositions( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_vecTagPositions");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 24>& C_Drone::m_vecTagIncrements( )
{
	static const auto offset = cheat::get_netvar_offset("C_Drone", "m_vecTagIncrements");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

