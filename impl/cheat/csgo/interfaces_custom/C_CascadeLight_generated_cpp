cheat::csgo::Vector& C_CascadeLight::m_shadowDirection( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_shadowDirection");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_CascadeLight::m_envLightShadowDirection( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_envLightShadowDirection");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_CascadeLight::m_bEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_bEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_CascadeLight::m_bUseLightEnvAngles( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_bUseLightEnvAngles");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_CascadeLight::m_LightColor( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_LightColor");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_CascadeLight::m_LightColorScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_LightColorScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_CascadeLight::m_flMaxShadowDist( )
{
	static const auto offset = cheat::get_netvar_offset("C_CascadeLight", "m_flMaxShadowDist");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

