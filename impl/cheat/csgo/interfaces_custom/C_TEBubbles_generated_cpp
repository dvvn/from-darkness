cheat::csgo::Vector& C_TEBubbles::m_vecMins( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_vecMins");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEBubbles::m_vecMaxs( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_vecMaxs");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBubbles::m_nModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_nModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEBubbles::m_fHeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_fHeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBubbles::m_nCount( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_nCount");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEBubbles::m_fSpeed( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBubbles", "m_fSpeed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

