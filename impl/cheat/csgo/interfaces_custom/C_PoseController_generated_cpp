std::array<int, 4>& C_PoseController::m_hProps( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_hProps");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 4>& C_PoseController::m_chPoseIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_chPoseIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PoseController::m_bPoseValueParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_bPoseValueParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fPoseValue( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fPoseValue");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fInterpolationTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fInterpolationTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PoseController::m_bInterpolationWrap( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_bInterpolationWrap");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fCycleFrequency( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fCycleFrequency");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_PoseController::m_nFModType( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_nFModType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fFModTimeOffset( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fFModTimeOffset");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fFModRate( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fFModRate");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PoseController::m_fFModAmplitude( )
{
	static const auto offset = cheat::get_netvar_offset("C_PoseController", "m_fFModAmplitude");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

