int& C_TeamplayRoundBasedRulesProxy::m_iRoundState( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_iRoundState");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bInWaitingForPlayers( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bInWaitingForPlayers");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TeamplayRoundBasedRulesProxy::m_iWinningTeam( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_iWinningTeam");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bInOvertime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bInOvertime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bInSetup( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bInSetup");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bSwitchedTeamsThisRound( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bSwitchedTeamsThisRound");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bAwaitingReadyRestart( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bAwaitingReadyRestart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TeamplayRoundBasedRulesProxy::m_flRestartRoundTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_flRestartRoundTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TeamplayRoundBasedRulesProxy::m_flMapResetTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_flMapResetTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<float, 32>& C_TeamplayRoundBasedRulesProxy::m_flNextRespawnWave( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_flNextRespawnWave");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<float, 32>& C_TeamplayRoundBasedRulesProxy::m_TeamRespawnWaveTimes( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_TeamRespawnWaveTimes");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 32>& C_TeamplayRoundBasedRulesProxy::m_bTeamReady( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bTeamReady");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TeamplayRoundBasedRulesProxy::m_bStopWatch( )
{
	static const auto offset = cheat::get_netvar_offset("C_TeamplayRoundBasedRulesProxy", "m_bStopWatch");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

