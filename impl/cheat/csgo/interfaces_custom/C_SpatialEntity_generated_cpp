cheat::csgo::Vector& C_SpatialEntity::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_SpatialEntity", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SpatialEntity::m_minFalloff( )
{
	static const auto offset = cheat::get_netvar_offset("C_SpatialEntity", "m_minFalloff");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SpatialEntity::m_maxFalloff( )
{
	static const auto offset = cheat::get_netvar_offset("C_SpatialEntity", "m_maxFalloff");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SpatialEntity::m_flCurWeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_SpatialEntity", "m_flCurWeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SpatialEntity::m_bEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_SpatialEntity", "m_bEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

