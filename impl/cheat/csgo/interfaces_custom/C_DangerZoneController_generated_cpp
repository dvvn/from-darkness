bool& C_DangerZoneController::m_bDangerZoneControllerEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_bDangerZoneControllerEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_DangerZoneController::m_bMissionControlledExplosions( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_bMissionControlledExplosions");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DangerZoneController::m_flStartTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_flStartTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DangerZoneController::m_flFinalExpansionTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_flFinalExpansionTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_DangerZoneController::m_vecEndGameCircleStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_vecEndGameCircleStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_DangerZoneController::m_vecEndGameCircleEnd( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_vecEndGameCircleEnd");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 42>& C_DangerZoneController::m_DangerZones( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_DangerZones");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<float, 5>& C_DangerZoneController::m_flWaveEndTimes( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_flWaveEndTimes");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_DangerZoneController::m_hTheFinalZone( )
{
	static const auto offset = cheat::get_netvar_offset("C_DangerZoneController", "m_hTheFinalZone");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

