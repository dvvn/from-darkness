int& C_MapVetoPickController::m_nDraftType( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nDraftType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_MapVetoPickController::m_nTeamWinningCoinToss( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nTeamWinningCoinToss");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nTeamWithFirstChoice( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nTeamWithFirstChoice");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 7>& C_MapVetoPickController::m_nVoteMapIdsList( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nVoteMapIdsList");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nAccountIDs( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nAccountIDs");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId0( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId0");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId1( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId1");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId2( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId2");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId3( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId3");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId4( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId4");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nMapId5( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nMapId5");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_MapVetoPickController::m_nStartingSide0( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nStartingSide0");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_MapVetoPickController::m_nCurrentPhase( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nCurrentPhase");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_MapVetoPickController::m_nPhaseStartTick( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nPhaseStartTick");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_MapVetoPickController::m_nPhaseDurationTicks( )
{
	static const auto offset = cheat::get_netvar_offset("C_MapVetoPickController", "m_nPhaseDurationTicks");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

