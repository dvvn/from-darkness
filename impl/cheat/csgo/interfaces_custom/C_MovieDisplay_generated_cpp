bool& C_MovieDisplay::m_bEnabled( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_bEnabled");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_MovieDisplay::m_bLooping( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_bLooping");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_MovieDisplay::m_szMovieFilename( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_szMovieFilename");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_MovieDisplay::m_szGroupName( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_szGroupName");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

bool& C_MovieDisplay::m_bStretchToFill( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_bStretchToFill");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_MovieDisplay::m_bForcedSlave( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_bForcedSlave");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_MovieDisplay::m_bUseCustomUVs( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_bUseCustomUVs");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_MovieDisplay::m_flUMin( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_flUMin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_MovieDisplay::m_flUMax( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_flUMax");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_MovieDisplay::m_flVMin( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_flVMin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_MovieDisplay::m_flVMax( )
{
	static const auto offset = cheat::get_netvar_offset("C_MovieDisplay", "m_flVMax");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

