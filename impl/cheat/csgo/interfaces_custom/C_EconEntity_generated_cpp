cheat::csgo::CBaseHandle& C_EconEntity::m_hOuter( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_hOuter");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_ProviderType( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_ProviderType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iReapplyProvisionParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iReapplyProvisionParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iItemDefinitionIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iItemDefinitionIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iEntityLevel( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iEntityLevel");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iItemIDHigh( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iItemIDHigh");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iItemIDLow( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iItemIDLow");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iAccountID( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iAccountID");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_iEntityQuality( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_iEntityQuality");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_EconEntity::m_bInitialized( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_bInitialized");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_EconEntity::m_szCustomName( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_szCustomName");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

int& C_EconEntity::m_OriginalOwnerXuidLow( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_OriginalOwnerXuidLow");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_OriginalOwnerXuidHigh( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_OriginalOwnerXuidHigh");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_nFallbackPaintKit( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_nFallbackPaintKit");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_nFallbackSeed( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_nFallbackSeed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EconEntity::m_flFallbackWear( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_flFallbackWear");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_EconEntity::m_nFallbackStatTrak( )
{
	static const auto offset = cheat::get_netvar_offset("C_EconEntity", "m_nFallbackStatTrak");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

