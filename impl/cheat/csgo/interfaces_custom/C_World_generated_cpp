float& C_World::m_flWaveHeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_flWaveHeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_World::m_WorldMins( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_WorldMins");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_World::m_WorldMaxs( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_WorldMaxs");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_World::m_bStartDark( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_bStartDark");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_World::m_flMaxOccludeeArea( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_flMaxOccludeeArea");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_World::m_flMinOccluderArea( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_flMinOccluderArea");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_World::m_flMaxPropScreenSpaceWidth( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_flMaxPropScreenSpaceWidth");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_World::m_flMinPropScreenSpaceWidth( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_flMinPropScreenSpaceWidth");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_World::m_iszDetailSpriteMaterial( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_iszDetailSpriteMaterial");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

bool& C_World::m_bColdWorld( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_bColdWorld");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_World::m_iTimeOfDay( )
{
	static const auto offset = cheat::get_netvar_offset("C_World", "m_iTimeOfDay");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

