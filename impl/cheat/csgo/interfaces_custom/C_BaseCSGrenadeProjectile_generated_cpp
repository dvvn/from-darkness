cheat::csgo::Vector& C_BaseCSGrenadeProjectile::m_vInitialVelocity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCSGrenadeProjectile", "m_vInitialVelocity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseCSGrenadeProjectile::m_nBounces( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCSGrenadeProjectile", "m_nBounces");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseCSGrenadeProjectile::m_nExplodeEffectIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCSGrenadeProjectile", "m_nExplodeEffectIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseCSGrenadeProjectile::m_nExplodeEffectTickBegin( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_BaseCSGrenadeProjectile::m_vecExplodeEffectOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

