std::array<cheat::csgo::QAngle, 24>& C_RagdollProp::m_ragAngles( )
{
	static const auto offset = cheat::get_netvar_offset("C_RagdollProp", "m_ragAngles");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<cheat::csgo::Vector, 24>& C_RagdollProp::m_ragPos( )
{
	static const auto offset = cheat::get_netvar_offset("C_RagdollProp", "m_ragPos");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_RagdollProp::m_hUnragdoll( )
{
	static const auto offset = cheat::get_netvar_offset("C_RagdollProp", "m_hUnragdoll");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_RagdollProp::m_flBlendWeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_RagdollProp", "m_flBlendWeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_RagdollProp::m_nOverlaySequence( )
{
	static const auto offset = cheat::get_netvar_offset("C_RagdollProp", "m_nOverlaySequence");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

