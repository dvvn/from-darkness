cheat::csgo::Vector& C_TEBloodSprite::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEBloodSprite::m_vecDirection( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "m_vecDirection");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::r( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "r");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::g( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "g");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::b( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "b");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::a( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "a");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::m_nSprayModel( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "m_nSprayModel");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::m_nDropModel( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "m_nDropModel");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBloodSprite::m_nSize( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBloodSprite", "m_nSize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

