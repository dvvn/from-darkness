cheat::csgo::QAngle& C_TEEffectDispatch::m_vAngles( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_vAngles");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEEffectDispatch::m_vNormal( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_vNormal");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_fFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_fFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEEffectDispatch::m_flMagnitude( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_flMagnitude");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEEffectDispatch::m_flScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_flScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nAttachmentIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nAttachmentIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nSurfaceProp( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nSurfaceProp");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_iEffectName( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_iEffectName");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nMaterial( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nMaterial");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nDamageType( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nDamageType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nHitBox( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nHitBox");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::entindex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "entindex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nOtherEntIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nOtherEntIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEEffectDispatch::m_nColor( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_nColor");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEEffectDispatch::m_flRadius( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_flRadius");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_TEEffectDispatch::m_bPositionsAreRelativeToEntity( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEEffectDispatch", "m_bPositionsAreRelativeToEntity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

