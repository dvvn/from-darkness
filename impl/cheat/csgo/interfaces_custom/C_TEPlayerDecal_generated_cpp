cheat::csgo::Vector& C_TEPlayerDecal::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEPlayerDecal::m_vecStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_vecStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEPlayerDecal::m_vecRight( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_vecRight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPlayerDecal::m_nEntity( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_nEntity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPlayerDecal::m_nPlayer( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_nPlayer");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEPlayerDecal::m_nHitbox( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEPlayerDecal", "m_nHitbox");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

