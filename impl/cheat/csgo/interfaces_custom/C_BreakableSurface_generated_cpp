int& C_BreakableSurface::m_nNumWide( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_nNumWide");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BreakableSurface::m_nNumHigh( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_nNumHigh");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_BreakableSurface::m_flPanelWidth( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_flPanelWidth");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_BreakableSurface::m_flPanelHeight( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_flPanelHeight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_BreakableSurface::m_vNormal( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_vNormal");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_BreakableSurface::m_vCorner( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_vCorner");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_BreakableSurface::m_bIsBroken( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_bIsBroken");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BreakableSurface::m_nSurfaceType( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_nSurfaceType");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 256>& C_BreakableSurface::m_RawPanelBitVec( )
{
	static const auto offset = cheat::get_netvar_offset("C_BreakableSurface", "m_RawPanelBitVec");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

