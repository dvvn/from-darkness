cheat::csgo::Color& C_Sun::m_clrRender( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_clrRender");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Color& C_Sun::m_clrOverlay( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_clrOverlay");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_Sun::m_vDirection( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_vDirection");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_Sun::m_bOn( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_bOn");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Sun::m_nSize( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_nSize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Sun::m_nOverlaySize( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_nOverlaySize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Sun::m_nMaterial( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_nMaterial");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Sun::m_nOverlayMaterial( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "m_nOverlayMaterial");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_Sun::HDRColorScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "HDRColorScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_Sun::glowDistanceScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_Sun", "glowDistanceScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

