int& C_DynamicLight::m_Flags( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_Flags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_DynamicLight::m_LightStyle( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_LightStyle");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DynamicLight::m_Radius( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_Radius");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_DynamicLight::m_Exponent( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_Exponent");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DynamicLight::m_InnerAngle( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_InnerAngle");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DynamicLight::m_OuterAngle( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_OuterAngle");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_DynamicLight::m_SpotRadius( )
{
	static const auto offset = cheat::get_netvar_offset("C_DynamicLight", "m_SpotRadius");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

