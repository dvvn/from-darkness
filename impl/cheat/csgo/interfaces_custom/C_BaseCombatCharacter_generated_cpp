float& C_BaseCombatCharacter::m_flNextAttack( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_flNextAttack");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 64>& C_BaseCombatCharacter::m_hMyWeapons( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_hMyWeapons");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseCombatCharacter::m_LastHitGroup( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_LastHitGroup");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_BaseCombatCharacter::m_hActiveWeapon( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_hActiveWeapon");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_BaseCombatCharacter::m_flTimeOfLastInjury( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_flTimeOfLastInjury");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseCombatCharacter::m_nRelativeDirectionOfLastInjury( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_nRelativeDirectionOfLastInjury");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 1>& C_BaseCombatCharacter::m_hMyWearables( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseCombatCharacter", "m_hMyWearables");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

