float& C_SmokeStack::m_SpreadSpeed( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_SpreadSpeed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_Speed( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_Speed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_StartSize( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_StartSize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_EndSize( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_EndSize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_Rate( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_Rate");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_JetLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_JetLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SmokeStack::m_bEmit( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_bEmit");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_flBaseSpread( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_flBaseSpread");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_flTwist( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_flTwist");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SmokeStack::m_flRollSpeed( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_flRollSpeed");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_SmokeStack::m_iMaterialModel( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_iMaterialModel");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_SmokeStack::m_vWind( )
{
	static const auto offset = cheat::get_netvar_offset("C_SmokeStack", "m_vWind");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

