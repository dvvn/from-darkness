std::array<int, 100>& C_Inferno::m_fireXDelta( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_fireXDelta");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 100>& C_Inferno::m_fireYDelta( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_fireYDelta");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 100>& C_Inferno::m_fireZDelta( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_fireZDelta");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 100>& C_Inferno::m_bFireIsBurning( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_bFireIsBurning");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Inferno::m_nFireEffectTickBegin( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_nFireEffectTickBegin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Inferno::m_fireCount( )
{
	static const auto offset = cheat::get_netvar_offset("C_Inferno", "m_fireCount");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

