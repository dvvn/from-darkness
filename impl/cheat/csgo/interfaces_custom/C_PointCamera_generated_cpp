float& C_PointCamera::m_FOV( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_FOV");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PointCamera::m_Resolution( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_Resolution");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PointCamera::m_bFogEnable( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_bFogEnable");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_PointCamera::m_FogColor( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_FogColor");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PointCamera::m_flFogStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_flFogStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PointCamera::m_flFogEnd( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_flFogEnd");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PointCamera::m_flFogMaxDensity( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_flFogMaxDensity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PointCamera::m_bActive( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_bActive");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PointCamera::m_bUseScreenAspectRatio( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCamera", "m_bUseScreenAspectRatio");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

