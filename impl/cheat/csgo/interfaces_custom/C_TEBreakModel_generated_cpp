cheat::csgo::Vector& C_TEBreakModel::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::QAngle& C_TEBreakModel::m_angRotation( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_angRotation");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEBreakModel::m_vecSize( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_vecSize");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEBreakModel::m_vecVelocity( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_vecVelocity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBreakModel::m_nModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_nModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBreakModel::m_nRandomization( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_nRandomization");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBreakModel::m_nCount( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_nCount");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_TEBreakModel::m_fTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_fTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEBreakModel::m_nFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEBreakModel", "m_nFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

