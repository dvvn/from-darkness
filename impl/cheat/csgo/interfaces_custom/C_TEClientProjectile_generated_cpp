cheat::csgo::Vector& C_TEClientProjectile::m_vecOrigin( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEClientProjectile", "m_vecOrigin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_TEClientProjectile::m_vecVelocity( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEClientProjectile", "m_vecVelocity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEClientProjectile::m_nModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEClientProjectile", "m_nModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_TEClientProjectile::m_nLifeTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEClientProjectile", "m_nLifeTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_TEClientProjectile::m_hOwner( )
{
	static const auto offset = cheat::get_netvar_offset("C_TEClientProjectile", "m_hOwner");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

