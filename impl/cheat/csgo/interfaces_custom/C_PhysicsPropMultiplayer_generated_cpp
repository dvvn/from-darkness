int& C_PhysicsPropMultiplayer::m_iPhysicsMode( )
{
	static const auto offset = cheat::get_netvar_offset("C_PhysicsPropMultiplayer", "m_iPhysicsMode");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PhysicsPropMultiplayer::m_fMass( )
{
	static const auto offset = cheat::get_netvar_offset("C_PhysicsPropMultiplayer", "m_fMass");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_PhysicsPropMultiplayer::m_collisionMins( )
{
	static const auto offset = cheat::get_netvar_offset("C_PhysicsPropMultiplayer", "m_collisionMins");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_PhysicsPropMultiplayer::m_collisionMaxs( )
{
	static const auto offset = cheat::get_netvar_offset("C_PhysicsPropMultiplayer", "m_collisionMaxs");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

