int& C_BaseViewModel::m_nModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_BaseViewModel::m_hWeapon( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_hWeapon");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nSkin( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nSkin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nBody( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nBody");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nSequence( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nSequence");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nViewModelIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nViewModelIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_BaseViewModel::m_flPlaybackRate( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_flPlaybackRate");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_fEffects( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_fEffects");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nAnimationParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nAnimationParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_BaseViewModel::m_hOwner( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_hOwner");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nNewSequenceParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nNewSequenceParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nResetEventsParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nResetEventsParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_BaseViewModel::m_nMuzzleFlashParity( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_nMuzzleFlashParity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_BaseViewModel::m_bShouldIgnoreOffsetAndAccuracy( )
{
	static const auto offset = cheat::get_netvar_offset("C_BaseViewModel", "m_bShouldIgnoreOffsetAndAccuracy");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

