bool& C_EnvTonemapController::m_bUseCustomAutoExposureMin( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_bUseCustomAutoExposureMin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_EnvTonemapController::m_bUseCustomAutoExposureMax( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_bUseCustomAutoExposureMax");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_EnvTonemapController::m_bUseCustomBloomScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_bUseCustomBloomScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flCustomAutoExposureMin( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flCustomAutoExposureMin");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flCustomAutoExposureMax( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flCustomAutoExposureMax");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flCustomBloomScale( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flCustomBloomScale");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flCustomBloomScaleMinimum( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flCustomBloomScaleMinimum");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flBloomExponent( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flBloomExponent");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flBloomSaturation( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flBloomSaturation");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flTonemapPercentTarget( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flTonemapPercentTarget");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flTonemapPercentBrightPixels( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flTonemapPercentBrightPixels");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flTonemapMinAvgLum( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flTonemapMinAvgLum");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_EnvTonemapController::m_flTonemapRate( )
{
	static const auto offset = cheat::get_netvar_offset("C_EnvTonemapController", "m_flTonemapRate");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

