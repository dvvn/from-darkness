int& C_FEPlayerDecal::m_nUniqueID( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nUniqueID");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

unsigned int& C_FEPlayerDecal::m_unAccountID( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_unAccountID");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

unsigned int& C_FEPlayerDecal::m_unTraceID( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_unTraceID");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_rtGcTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_rtGcTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_FEPlayerDecal::m_vecEndPos( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_vecEndPos");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_FEPlayerDecal::m_vecStart( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_vecStart");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_FEPlayerDecal::m_vecRight( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_vecRight");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_FEPlayerDecal::m_vecNormal( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_vecNormal");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_nEntity( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nEntity");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_nPlayer( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nPlayer");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_nHitbox( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nHitbox");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_nTintID( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nTintID");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_FEPlayerDecal::m_flCreationTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_flCreationTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_FEPlayerDecal::m_nVersion( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_nVersion");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 128>& C_FEPlayerDecal::m_ubSignature( )
{
	static const auto offset = cheat::get_netvar_offset("C_FEPlayerDecal", "m_ubSignature");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

