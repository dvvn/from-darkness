std::array<float, 4>& C_Tablet::m_flUpgradeExpirationTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_flUpgradeExpirationTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 42>& C_Tablet::m_vecLocalHexFlags( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_vecLocalHexFlags");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Tablet::m_nContractKillGridIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_nContractKillGridIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Tablet::m_nContractKillGridHighResIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_nContractKillGridHighResIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_Tablet::m_bTabletReceptionIsBlocked( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_bTabletReceptionIsBlocked");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_Tablet::m_flScanProgress( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_flScanProgress");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_Tablet::m_flBootTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_flBootTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_Tablet::m_flShowMapTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_flShowMapTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 8>& C_Tablet::m_vecNotificationIds( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_vecNotificationIds");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<float, 8>& C_Tablet::m_vecNotificationTimestamps( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_vecNotificationTimestamps");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<cheat::csgo::Vector, 24>& C_Tablet::m_vecPlayerPositionHistory( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_vecPlayerPositionHistory");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_Tablet::m_nLastPurchaseIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_nLastPurchaseIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::Vector& C_Tablet::m_vecNearestMetalCratePos( )
{
	static const auto offset = cheat::get_netvar_offset("C_Tablet", "m_vecNearestMetalCratePos");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

