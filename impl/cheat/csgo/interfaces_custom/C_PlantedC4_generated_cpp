bool& C_PlantedC4::m_bBombTicking( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_bBombTicking");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_PlantedC4::m_nBombSite( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_nBombSite");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PlantedC4::m_flC4Blow( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_flC4Blow");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PlantedC4::m_flTimerLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_flTimerLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PlantedC4::m_flDefuseLength( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_flDefuseLength");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PlantedC4::m_flDefuseCountDown( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_flDefuseCountDown");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_PlantedC4::m_bBombDefused( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_bBombDefused");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_PlantedC4::m_hBombDefuser( )
{
	static const auto offset = cheat::get_netvar_offset("C_PlantedC4", "m_hBombDefuser");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

