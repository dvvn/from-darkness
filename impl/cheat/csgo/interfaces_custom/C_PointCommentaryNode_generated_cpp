bool& C_PointCommentaryNode::m_bActive( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_bActive");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_PointCommentaryNode::m_flStartTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_flStartTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

char* C_PointCommentaryNode::m_iszCommentaryFile( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_iszCommentaryFile");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_PointCommentaryNode::m_iszCommentaryFileNoHDR( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_iszCommentaryFileNoHDR");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

char* C_PointCommentaryNode::m_iszSpeakers( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_iszSpeakers");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ptr( );
}

int& C_PointCommentaryNode::m_iNodeNumber( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_iNodeNumber");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

int& C_PointCommentaryNode::m_iNodeNumberMax( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_iNodeNumberMax");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

cheat::csgo::CBaseHandle& C_PointCommentaryNode::m_hViewPosition( )
{
	static const auto offset = cheat::get_netvar_offset("C_PointCommentaryNode", "m_hViewPosition");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

