int& C_SceneEntity::m_nSceneStringIndex( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_nSceneStringIndex");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SceneEntity::m_bIsPlayingBack( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_bIsPlayingBack");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SceneEntity::m_bPaused( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_bPaused");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

bool& C_SceneEntity::m_bMultiplayer( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_bMultiplayer");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

float& C_SceneEntity::m_flForceClientTime( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_flForceClientTime");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

std::array<int, 16>& C_SceneEntity::m_hActorList( )
{
	static const auto offset = cheat::get_netvar_offset("C_SceneEntity", "m_hActorList");
	auto addr = nstd::mem::address(this).add(offset);
	return addr.ref( );
}

