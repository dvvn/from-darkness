#include "RocketTrail.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& RocketTrail::m_EndColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_EndColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
float& RocketTrail::m_EndSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_EndSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_MaxSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_MaxSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_MinSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_MinSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_Opacity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_Opacity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_ParticleLifetime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_ParticleLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_SpawnRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_SpawnRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_SpawnRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_SpawnRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
cheat::csgo::Vector& RocketTrail::m_StartColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_StartColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
float& RocketTrail::m_StartSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_StartSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& RocketTrail::m_StopEmitTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_StopEmitTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& RocketTrail::m_bDamaged( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_bDamaged");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& RocketTrail::m_bEmit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_bEmit");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& RocketTrail::m_flFlareScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_flFlareScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& RocketTrail::m_nAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("RocketTrail", "m_nAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
