#include "C_EntityDissolve.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_EntityDissolve::m_flStartTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flStartTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutStart");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutModelStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutModelStart");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeOutModelLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutModelLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeInStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeInStart");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_EntityDissolve::m_flFadeInLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeInLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_EntityDissolve::m_nDissolveType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_nDissolveType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_EntityDissolve::m_vDissolverOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_vDissolverOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_EntityDissolve::m_nMagnitude( )
{
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_nMagnitude");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
