#include "C_EntityDissolve.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_EntityDissolve::m_flStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flStartTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeOutStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutStart");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeOutLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutLength");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeOutModelStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutModelStart");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeOutModelLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeOutModelLength");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeInStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeInStart");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EntityDissolve::m_flFadeInLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_flFadeInLength");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_EntityDissolve::m_nDissolveType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_nDissolveType");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
utl::Vector& C_EntityDissolve::m_vDissolverOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_vDissolverOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
int32_t& C_EntityDissolve::m_nMagnitude( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EntityDissolve.m_nMagnitude");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
