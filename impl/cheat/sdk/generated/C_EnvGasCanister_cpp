#include "C_EnvGasCanister.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_EnvGasCanister::m_flFlightSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flFlightSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvGasCanister::m_flLaunchTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flLaunchTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecParabolaDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecParabolaDirection");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
float& C_EnvGasCanister::m_flFlightTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flFlightTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvGasCanister::m_flWorldEnterTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flWorldEnterTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvGasCanister::m_flInitialZSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flInitialZSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvGasCanister::m_flZAcceleration( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flZAcceleration");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvGasCanister::m_flHorizSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flHorizSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_EnvGasCanister::m_bLaunchedFromWithinWorld( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_bLaunchedFromWithinWorld");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecImpactPosition( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecImpactPosition");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecStartPosition( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecStartPosition");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecEnterWorldPosition( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecEnterWorldPosition");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecDirection");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::QAngle& C_EnvGasCanister::m_vecStartAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecStartAngles");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::QAngle>( );
#endif
}
utl::Vector& C_EnvGasCanister::m_vecSkyboxOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecSkyboxOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
float& C_EnvGasCanister::m_flSkyboxScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_flSkyboxScale");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_EnvGasCanister::m_bInSkybox( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_bInSkybox");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvGasCanister::m_bDoImpactEffects( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_bDoImpactEffects");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvGasCanister::m_bLanded( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_bLanded");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
CBaseHandle& C_EnvGasCanister::m_hSkyboxCopy( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_hSkyboxCopy");
	auto addr = utl::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_EnvGasCanister::m_nMyZoneIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_nMyZoneIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
utl::Vector2D& C_EnvGasCanister::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector2D*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvGasCanister.m_vecOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector2D>( );
#endif
}
