#include "C_VGuiScreen.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_VGuiScreen::m_flWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_flWidth");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_VGuiScreen::m_flHeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_flHeight");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_VGuiScreen::m_fScreenFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_fScreenFlags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_VGuiScreen::m_nPanelName( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_nPanelName");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_VGuiScreen::m_nAttachmentIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_nAttachmentIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_VGuiScreen::m_nOverlayMaterial( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_nOverlayMaterial");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_VGuiScreen::m_hPlayerOwner( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VGuiScreen.m_hPlayerOwner");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
