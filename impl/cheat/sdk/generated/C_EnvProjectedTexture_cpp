#include "C_EnvProjectedTexture.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/CBaseHandle.hpp"
#include <cstdint>

using namespace cheat;
using namespace csgo;

int32_t& C_EnvProjectedTexture::m_LightColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_LightColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
char* C_EnvProjectedTexture::m_SpotlightTextureName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_SpotlightTextureName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
bool& C_EnvProjectedTexture::m_bAlwaysUpdate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bAlwaysUpdate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bCameraSpace( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bCameraSpace");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bEnableShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bEnableShadows");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bLightOnlyTarget( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bLightOnlyTarget");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bLightWorld( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bLightWorld");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bSimpleProjection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bSimpleProjection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_EnvProjectedTexture::m_bState( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_bState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_EnvProjectedTexture::m_flAmbient( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flAmbient");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flBrightnessScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flBrightnessScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flColorTransitionTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flColorTransitionTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flFarZ( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flFarZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flLightFOV( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flLightFOV");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flNearZ( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flNearZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flProjectionSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flProjectionSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvProjectedTexture::m_flRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_flRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_EnvProjectedTexture::m_hTargetEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_hTargetEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_EnvProjectedTexture::m_iStyle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_iStyle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_EnvProjectedTexture::m_nShadowQuality( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_nShadowQuality");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_EnvProjectedTexture::m_nSpotlightTextureFrame( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvProjectedTexture", "m_nSpotlightTextureFrame");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
