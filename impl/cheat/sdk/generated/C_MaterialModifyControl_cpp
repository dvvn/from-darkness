#include "C_MaterialModifyControl.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

char* C_MaterialModifyControl::m_szMaterialName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_szMaterialName");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
char* C_MaterialModifyControl::m_szMaterialVar( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_szMaterialVar");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
char* C_MaterialModifyControl::m_szMaterialVarValue( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_szMaterialVarValue");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
int32_t& C_MaterialModifyControl::m_iFrameStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_iFrameStart");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_MaterialModifyControl::m_iFrameEnd( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_iFrameEnd");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_MaterialModifyControl::m_bWrap( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_bWrap");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_MaterialModifyControl::m_flFramerate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_flFramerate");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_MaterialModifyControl::m_bNewAnimCommandsSemaphore( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_bNewAnimCommandsSemaphore");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_MaterialModifyControl::m_flFloatLerpStartValue( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_flFloatLerpStartValue");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_MaterialModifyControl::m_flFloatLerpEndValue( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_flFloatLerpEndValue");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_MaterialModifyControl::m_flFloatLerpTransitionTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_flFloatLerpTransitionTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_MaterialModifyControl::m_bFloatLerpWrap( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_bFloatLerpWrap");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_MaterialModifyControl::m_nModifyMode( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MaterialModifyControl.m_nModifyMode");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
