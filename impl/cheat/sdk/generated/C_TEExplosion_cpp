#include "C_TEExplosion.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat\sdk\Vector.hpp"

using namespace cheat::csgo;

int& C_TEExplosion::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_TEExplosion::m_fScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_fScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_TEExplosion::m_nFrameRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nFrameRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEExplosion::m_nFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_TEExplosion::m_vecNormal( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_vecNormal");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
unsigned char& C_TEExplosion::m_chMaterialType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(unsigned char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_chMaterialType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned char>( );
#endif
}
int& C_TEExplosion::m_nRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEExplosion::m_nMagnitude( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nMagnitude");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
