#include "C_TEExplosion.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_TEExplosion::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEExplosion::m_fScale( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_fScale");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TEExplosion::m_nFrameRate( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_nFrameRate");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEExplosion::m_nFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_nFlags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_TEExplosion::m_vecNormal( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_vecNormal");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
uint8_t& C_TEExplosion::m_chMaterialType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_chMaterialType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<uint8_t>( );
}
int32_t& C_TEExplosion::m_nRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_nRadius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEExplosion::m_nMagnitude( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion.m_nMagnitude");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
