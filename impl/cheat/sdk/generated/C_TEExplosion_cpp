#include "C_TEExplosion.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

uint8_t& C_TEExplosion::m_chMaterialType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(uint8_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_chMaterialType");
	auto addr = address(this).add(offset);
	return addr.ref<uint8_t>( );
#endif
}
float& C_TEExplosion::m_fScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_fScale");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_TEExplosion::m_nFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nFlags");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEExplosion::m_nFrameRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nFrameRate");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEExplosion::m_nMagnitude( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nMagnitude");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEExplosion::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nModelIndex");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEExplosion::m_nRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_nRadius");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_TEExplosion::m_vecNormal( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEExplosion", "m_vecNormal");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
