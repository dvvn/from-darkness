#include "C_SlideshowDisplay.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

bool& C_SlideshowDisplay::m_bEnabled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_bEnabled");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_SlideshowDisplay::m_bNoListRepeats( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_bNoListRepeats");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
std::array<int32_t, 16>& C_SlideshowDisplay::m_chCurrentSlideLists( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 16>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_chCurrentSlideLists");
	auto addr = address(this).add(offset);
	return addr.ref<std::array<int32_t, 16>>( );
#endif
}
float& C_SlideshowDisplay::m_fMaxSlideTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_fMaxSlideTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_SlideshowDisplay::m_fMinSlideTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_fMinSlideTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_SlideshowDisplay::m_iCycleType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_iCycleType");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
char* C_SlideshowDisplay::m_szDisplayText( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_szDisplayText");
	auto addr = address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_SlideshowDisplay::m_szSlideshowDirectory( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay", "m_szSlideshowDirectory");
	auto addr = address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
