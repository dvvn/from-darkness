#include "C_SlideshowDisplay.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_SlideshowDisplay::m_bEnabled( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_bEnabled");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
char* C_SlideshowDisplay::m_szDisplayText( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_szDisplayText");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_SlideshowDisplay::m_szSlideshowDirectory( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_szSlideshowDirectory");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
utl::array<int32_t, 16>& C_SlideshowDisplay::m_chCurrentSlideLists( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_chCurrentSlideLists");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 16>>( );
}
float& C_SlideshowDisplay::m_fMinSlideTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_fMinSlideTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SlideshowDisplay::m_fMaxSlideTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_fMaxSlideTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_SlideshowDisplay::m_iCycleType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_iCycleType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_SlideshowDisplay::m_bNoListRepeats( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SlideshowDisplay.m_bNoListRepeats");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
