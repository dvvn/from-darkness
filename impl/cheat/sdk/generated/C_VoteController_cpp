#include "C_VoteController.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_VoteController::m_iActiveIssueIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VoteController.m_iActiveIssueIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_VoteController::m_iOnlyTeamToVote( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VoteController.m_iOnlyTeamToVote");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::array<int32_t, 5>& C_VoteController::m_nVoteOptionCount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VoteController.m_nVoteOptionCount");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 5>>( );
}
int32_t& C_VoteController::m_nPotentialVotes( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VoteController.m_nPotentialVotes");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_VoteController::m_bIsYesNoVote( )
{
	static const auto offset = netvars::get_ptr( )->at("C_VoteController.m_bIsYesNoVote");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
