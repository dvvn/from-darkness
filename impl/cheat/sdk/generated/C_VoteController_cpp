#include "C_VoteController.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include <array>

using namespace cheat::csgo;

bool& C_VoteController::m_bIsYesNoVote( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_VoteController", "m_bIsYesNoVote");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_VoteController::m_iActiveIssueIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_VoteController", "m_iActiveIssueIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_VoteController::m_iOnlyTeamToVote( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_VoteController", "m_iOnlyTeamToVote");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_VoteController::m_nPotentialVotes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_VoteController", "m_nPotentialVotes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 5>& C_VoteController::m_nVoteOptionCount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 5>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_VoteController", "m_nVoteOptionCount");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 5>>( );
#endif
}
