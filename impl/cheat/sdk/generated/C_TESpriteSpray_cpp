#include "C_TESpriteSpray.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TESpriteSpray::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TESpriteSpray::m_vecDirection( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_vecDirection");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TESpriteSpray::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TESpriteSpray::m_fNoise( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_fNoise");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TESpriteSpray::m_nCount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_nCount");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TESpriteSpray::m_nSpeed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TESpriteSpray.m_nSpeed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
