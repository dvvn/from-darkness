#include "C_Inferno.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::array<int32_t, 100>& C_Inferno::m_fireXDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireXDelta");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
}
utl::array<int32_t, 100>& C_Inferno::m_fireYDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireYDelta");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
}
utl::array<int32_t, 100>& C_Inferno::m_fireZDelta( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireZDelta");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
}
utl::array<int32_t, 100>& C_Inferno::m_bFireIsBurning( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_bFireIsBurning");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
}
int32_t& C_Inferno::m_nFireEffectTickBegin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_nFireEffectTickBegin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Inferno::m_fireCount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireCount");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
