#include "C_Inferno.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

utl::array<int32_t, 100>& C_Inferno::m_fireXDelta( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 100>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireXDelta");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
#endif
}
utl::array<int32_t, 100>& C_Inferno::m_fireYDelta( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 100>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireYDelta");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
#endif
}
utl::array<int32_t, 100>& C_Inferno::m_fireZDelta( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 100>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireZDelta");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
#endif
}
utl::array<int32_t, 100>& C_Inferno::m_bFireIsBurning( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 100>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_bFireIsBurning");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 100>>( );
#endif
}
int32_t& C_Inferno::m_nFireEffectTickBegin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_nFireEffectTickBegin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Inferno::m_fireCount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Inferno.m_fireCount");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
