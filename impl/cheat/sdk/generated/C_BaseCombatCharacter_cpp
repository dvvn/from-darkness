#include "C_BaseCombatCharacter.h"

using namespace cheat;
using namespace csgo;

int32_t& C_BaseCombatCharacter::m_LastHitGroup( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_LastHitGroup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_BaseCombatCharacter::m_flNextAttack( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flNextAttack");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseCombatCharacter::m_flTimeOfLastInjury( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flTimeOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_BaseCombatCharacter::m_hActiveWeapon( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hActiveWeapon");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
std::array<int32_t, 64>& C_BaseCombatCharacter::m_hMyWeapons( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 64>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWeapons");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int32_t, 64>>( );
#endif
}
std::array<int32_t, 1>& C_BaseCombatCharacter::m_hMyWearables( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 1>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWearables");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int32_t, 1>>( );
#endif
}
int32_t& C_BaseCombatCharacter::m_nRelativeDirectionOfLastInjury( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_nRelativeDirectionOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
