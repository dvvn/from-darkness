#include "C_BaseCombatCharacter.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat\sdk\CBaseHandle.hpp"
#include <array<int, 1>>
#include <array<int, 64>>

using namespace cheat::csgo;

float& C_BaseCombatCharacter::m_flNextAttack( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flNextAttack");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<int, 64>& C_BaseCombatCharacter::m_hMyWeapons( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 64>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWeapons");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 64>>( );
#endif
}
int& C_BaseCombatCharacter::m_LastHitGroup( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_LastHitGroup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseCombatCharacter::m_hActiveWeapon( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hActiveWeapon");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
float& C_BaseCombatCharacter::m_flTimeOfLastInjury( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_flTimeOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseCombatCharacter::m_nRelativeDirectionOfLastInjury( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_nRelativeDirectionOfLastInjury");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 1>& C_BaseCombatCharacter::m_hMyWearables( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 1>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCombatCharacter", "m_hMyWearables");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 1>>( );
#endif
}
