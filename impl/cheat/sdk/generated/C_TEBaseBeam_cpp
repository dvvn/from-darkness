#include "C_TEBaseBeam.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_TEBaseBeam::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::m_nHaloIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nHaloIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::m_nStartFrame( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nStartFrame");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::m_nFrameRate( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nFrameRate");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEBaseBeam::m_fLife( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_fLife");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEBaseBeam::m_fWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_fWidth");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEBaseBeam::m_fEndWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_fEndWidth");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TEBaseBeam::m_nFadeLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nFadeLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEBaseBeam::m_fAmplitude( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_fAmplitude");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TEBaseBeam::m_nSpeed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nSpeed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::r( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.r");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::g( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.g");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::b( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.b");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::a( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.a");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBaseBeam::m_nFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBaseBeam.m_nFlags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
