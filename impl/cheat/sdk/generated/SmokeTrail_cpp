#include "SmokeTrail.h"

using namespace cheat;
using namespace csgo;

Vector& SmokeTrail::m_EndColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_EndColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
float& SmokeTrail::m_EndSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_EndSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MaxDirectedSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_MaxDirectedSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MaxSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_MaxSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MinDirectedSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_MinDirectedSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MinSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_MinSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_Opacity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_Opacity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_ParticleLifetime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_ParticleLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_SpawnRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_SpawnRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_SpawnRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_SpawnRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
Vector& SmokeTrail::m_StartColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_StartColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
float& SmokeTrail::m_StartSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_StartSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_StopEmitTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_StopEmitTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& SmokeTrail::m_bEmit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_bEmit");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& SmokeTrail::m_nAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail", "m_nAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
