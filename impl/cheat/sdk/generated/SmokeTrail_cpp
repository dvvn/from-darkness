#include "SmokeTrail.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

float& SmokeTrail::m_SpawnRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_SpawnRate");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
utl::Vector& SmokeTrail::m_StartColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_StartColor");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::Vector& SmokeTrail::m_EndColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_EndColor");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
float& SmokeTrail::m_ParticleLifetime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_ParticleLifetime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_StopEmitTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_StopEmitTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MinSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_MinSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MaxSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_MaxSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MinDirectedSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_MinDirectedSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_MaxDirectedSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_MaxDirectedSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_StartSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_StartSize");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_EndSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_EndSize");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SmokeTrail::m_SpawnRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_SpawnRadius");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& SmokeTrail::m_bEmit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_bEmit");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& SmokeTrail::m_nAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_nAttachment");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& SmokeTrail::m_Opacity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SmokeTrail.m_Opacity");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
