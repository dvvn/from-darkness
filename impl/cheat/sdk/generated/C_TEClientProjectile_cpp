#include "C_TEClientProjectile.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEClientProjectile::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEClientProjectile.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEClientProjectile::m_vecVelocity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEClientProjectile.m_vecVelocity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEClientProjectile::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEClientProjectile.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEClientProjectile::m_nLifeTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEClientProjectile.m_nLifeTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEClientProjectile::m_hOwner( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEClientProjectile.m_hOwner");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
