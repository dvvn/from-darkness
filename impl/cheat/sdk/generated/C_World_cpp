#include "C_World.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_World::m_flWaveHeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_flWaveHeight");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
utl::Vector& C_World::m_WorldMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_WorldMins");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::Vector& C_World::m_WorldMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_WorldMaxs");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
bool& C_World::m_bStartDark( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_bStartDark");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_World::m_flMaxOccludeeArea( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_flMaxOccludeeArea");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_World::m_flMinOccluderArea( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_flMinOccluderArea");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_World::m_flMaxPropScreenSpaceWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_flMaxPropScreenSpaceWidth");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_World::m_flMinPropScreenSpaceWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_flMinPropScreenSpaceWidth");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
char* C_World::m_iszDetailSpriteMaterial( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_iszDetailSpriteMaterial");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
bool& C_World::m_bColdWorld( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_bColdWorld");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_World::m_iTimeOfDay( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_World.m_iTimeOfDay");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
