#include "C_TEFootprintDecal.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEFootprintDecal::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEFootprintDecal::m_vecDirection( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal.m_vecDirection");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEFootprintDecal::m_nEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal.m_nEntity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFootprintDecal::m_nIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal.m_nIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
uint8_t& C_TEFootprintDecal::m_chMaterialType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal.m_chMaterialType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<uint8_t>( );
}
