#include "C_TEFootprintDecal.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEFootprintDecal::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_TEFootprintDecal::m_vecDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_vecDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_TEFootprintDecal::m_nEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_nEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEFootprintDecal::m_nIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_nIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
unsigned char& C_TEFootprintDecal::m_chMaterialType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(unsigned char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFootprintDecal", "m_chMaterialType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<unsigned char>( );
#endif
}
