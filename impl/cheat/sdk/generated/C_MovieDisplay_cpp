#include "C_MovieDisplay.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

bool& C_MovieDisplay::m_bEnabled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_bEnabled");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_MovieDisplay::m_bForcedSlave( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_bForcedSlave");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_MovieDisplay::m_bLooping( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_bLooping");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_MovieDisplay::m_bStretchToFill( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_bStretchToFill");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_MovieDisplay::m_bUseCustomUVs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_bUseCustomUVs");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_MovieDisplay::m_flUMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_flUMax");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_MovieDisplay::m_flUMin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_flUMin");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_MovieDisplay::m_flVMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_flVMax");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_MovieDisplay::m_flVMin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_flVMin");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
char* C_MovieDisplay::m_szGroupName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_szGroupName");
	auto addr = address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_MovieDisplay::m_szMovieFilename( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_MovieDisplay", "m_szMovieFilename");
	auto addr = address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
