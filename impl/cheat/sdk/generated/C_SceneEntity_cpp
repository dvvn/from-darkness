#include "C_SceneEntity.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_SceneEntity::m_nSceneStringIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_nSceneStringIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_SceneEntity::m_bIsPlayingBack( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_bIsPlayingBack");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_SceneEntity::m_bPaused( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_bPaused");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_SceneEntity::m_bMultiplayer( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_bMultiplayer");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_SceneEntity::m_flForceClientTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_flForceClientTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
utl::array<int32_t, 16>& C_SceneEntity::m_hActorList( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity.m_hActorList");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 16>>( );
}
