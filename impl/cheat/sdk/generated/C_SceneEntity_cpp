#include "C_SceneEntity.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include <array>
#include <cstdint>

using namespace cheat;
using namespace csgo;

bool& C_SceneEntity::m_bIsPlayingBack( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_bIsPlayingBack");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_SceneEntity::m_bMultiplayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_bMultiplayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_SceneEntity::m_bPaused( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_bPaused");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_SceneEntity::m_flForceClientTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_flForceClientTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<int32_t, 16>& C_SceneEntity::m_hActorList( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 16>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_hActorList");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int32_t, 16>>( );
#endif
}
int32_t& C_SceneEntity::m_nSceneStringIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_SceneEntity", "m_nSceneStringIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
