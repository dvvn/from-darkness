#include "ParticleSmokeGrenade.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

int32_t& ParticleSmokeGrenade::m_CurrentStage( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_CurrentStage");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& ParticleSmokeGrenade::m_FadeEndTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_FadeEndTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& ParticleSmokeGrenade::m_FadeStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_FadeStartTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
Vector& ParticleSmokeGrenade::m_MaxColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_MaxColor");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& ParticleSmokeGrenade::m_MinColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_MinColor");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
float& ParticleSmokeGrenade::m_flSpawnTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade", "m_flSpawnTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
