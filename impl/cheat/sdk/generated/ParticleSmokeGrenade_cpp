#include "ParticleSmokeGrenade.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

float& ParticleSmokeGrenade::m_flSpawnTime( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_flSpawnTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& ParticleSmokeGrenade::m_FadeStartTime( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_FadeStartTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& ParticleSmokeGrenade::m_FadeEndTime( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_FadeEndTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
utl::Vector& ParticleSmokeGrenade::m_MinColor( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_MinColor");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& ParticleSmokeGrenade::m_MaxColor( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_MaxColor");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& ParticleSmokeGrenade::m_CurrentStage( )
{
	static const auto offset = netvars::get_ptr( )->at("ParticleSmokeGrenade.m_CurrentStage");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
