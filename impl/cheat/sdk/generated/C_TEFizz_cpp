#include "C_TEFizz.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_TEFizz::m_nEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFizz.m_nEntity");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEFizz::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFizz.m_nModelIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEFizz::m_nDensity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFizz.m_nDensity");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEFizz::m_nCurrent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEFizz.m_nCurrent");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
