#include "C_Tablet.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::array<float, 4>& C_Tablet::m_flUpgradeExpirationTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_flUpgradeExpirationTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<float, 4>>( );
}
utl::array<int32_t, 42>& C_Tablet::m_vecLocalHexFlags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_vecLocalHexFlags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 42>>( );
}
int32_t& C_Tablet::m_nContractKillGridIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_nContractKillGridIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Tablet::m_nContractKillGridHighResIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_nContractKillGridHighResIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_Tablet::m_bTabletReceptionIsBlocked( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_bTabletReceptionIsBlocked");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_Tablet::m_flScanProgress( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_flScanProgress");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Tablet::m_flBootTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_flBootTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Tablet::m_flShowMapTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_flShowMapTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
utl::array<int32_t, 8>& C_Tablet::m_vecNotificationIds( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_vecNotificationIds");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 8>>( );
}
utl::array<float, 8>& C_Tablet::m_vecNotificationTimestamps( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_vecNotificationTimestamps");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<float, 8>>( );
}
utl::array<utl::Vector, 24>& C_Tablet::m_vecPlayerPositionHistory( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_vecPlayerPositionHistory");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<utl::Vector, 24>>( );
}
int32_t& C_Tablet::m_nLastPurchaseIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_nLastPurchaseIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_Tablet::m_vecNearestMetalCratePos( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Tablet.m_vecNearestMetalCratePos");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
