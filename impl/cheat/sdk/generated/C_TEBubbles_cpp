#include "C_TEBubbles.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat\sdk\Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEBubbles::m_vecMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_vecMins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_TEBubbles::m_vecMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_vecMaxs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_TEBubbles::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_TEBubbles::m_fHeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_fHeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_TEBubbles::m_nCount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_nCount");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_TEBubbles::m_fSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles", "m_fSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
