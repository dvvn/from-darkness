#include "C_TEBubbles.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEBubbles::m_vecMins( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_vecMins");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEBubbles::m_vecMaxs( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_vecMaxs");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEBubbles::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEBubbles::m_fHeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_fHeight");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TEBubbles::m_nCount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_nCount");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEBubbles::m_fSpeed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBubbles.m_fSpeed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
