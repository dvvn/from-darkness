#include "C_TEPhysicsProp.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Color.hpp"
#include "cheat/sdk/QAngle.hpp"
#include "cheat/sdk/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEPhysicsProp::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::QAngle& C_TEPhysicsProp::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_angRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
cheat::csgo::Vector& C_TEPhysicsProp::m_vecVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_vecVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_TEPhysicsProp::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEPhysicsProp::m_nFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEPhysicsProp::m_nSkin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nSkin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_TEPhysicsProp::m_nEffects( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_nEffects");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Color& C_TEPhysicsProp::m_clrRender( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEPhysicsProp", "m_clrRender");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
#endif
}
