#include "C_DynamicProp.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Color.hpp"

using namespace cheat::csgo;

bool& C_DynamicProp::m_bShouldGlow( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp", "m_bShouldGlow");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_DynamicProp::m_bUseHitboxesForRenderBox( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp", "m_bUseHitboxesForRenderBox");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
cheat::csgo::Color& C_DynamicProp::m_clrGlow( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp", "m_clrGlow");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
#endif
}
float& C_DynamicProp::m_flGlowMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp", "m_flGlowMaxDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_DynamicProp::m_nGlowStyle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp", "m_nGlowStyle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
