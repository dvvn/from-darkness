#include "C_DynamicProp.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_DynamicProp::m_bUseHitboxesForRenderBox( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp.m_bUseHitboxesForRenderBox");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_DynamicProp::m_flGlowMaxDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp.m_flGlowMaxDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_DynamicProp::m_bShouldGlow( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp.m_bShouldGlow");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
utl::Color& C_DynamicProp::m_clrGlow( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp.m_clrGlow");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Color>( );
}
int32_t& C_DynamicProp::m_nGlowStyle( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicProp.m_nGlowStyle");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
