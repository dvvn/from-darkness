#include "C_CascadeLight.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_CascadeLight::m_shadowDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_shadowDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_CascadeLight::m_envLightShadowDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_envLightShadowDirection");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
bool& C_CascadeLight::m_bEnabled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_bEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_CascadeLight::m_bUseLightEnvAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_bUseLightEnvAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_CascadeLight::m_LightColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_LightColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CascadeLight::m_LightColorScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_LightColorScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_CascadeLight::m_flMaxShadowDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CascadeLight", "m_flMaxShadowDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
