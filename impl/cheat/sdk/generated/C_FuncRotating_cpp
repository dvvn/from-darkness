#include "C_FuncRotating.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_FuncRotating::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating.m_vecOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::QAngle& C_FuncRotating::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating.m_angRotation");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::QAngle>( );
#endif
}
float& C_FuncRotating::m_flSimulationTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating.m_flSimulationTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
