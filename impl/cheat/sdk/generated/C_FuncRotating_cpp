#include "C_FuncRotating.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

QAngle& C_FuncRotating::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating", "m_angRotation");
	auto addr = address(this).add(offset);
	return addr.ref<QAngle>( );
#endif
}
float& C_FuncRotating::m_flSimulationTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating", "m_flSimulationTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
Vector& C_FuncRotating::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FuncRotating", "m_vecOrigin");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
