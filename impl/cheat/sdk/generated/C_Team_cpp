#include "C_Team.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_Team::m_iTeamNum( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_iTeamNum");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_Team::m_bSurrendered( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_bSurrendered");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_Team::m_scoreTotal( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_scoreTotal");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_scoreFirstHalf( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_scoreFirstHalf");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_scoreSecondHalf( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_scoreSecondHalf");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_scoreOvertime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_scoreOvertime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_iClanID( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_iClanID");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
char* C_Team::m_szTeamname( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_szTeamname");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_Team::m_szClanTeamname( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_szClanTeamname");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_Team::m_szTeamFlagImage( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_szTeamFlagImage");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_Team::m_szTeamLogoImage( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_szTeamLogoImage");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_Team::m_szTeamMatchStat( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_szTeamMatchStat");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
int32_t& C_Team::m_nGGLeaderEntIndex_CT( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_nGGLeaderEntIndex_CT");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_nGGLeaderEntIndex_T( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_nGGLeaderEntIndex_T");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::m_numMapVictories( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.m_numMapVictories");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Team::player_array_element( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Team.player_array_element");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
