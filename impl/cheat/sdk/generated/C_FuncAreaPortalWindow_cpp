#include "C_FuncAreaPortalWindow.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_FuncAreaPortalWindow::m_flFadeStartDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_FuncAreaPortalWindow.m_flFadeStartDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_FuncAreaPortalWindow::m_flFadeDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_FuncAreaPortalWindow.m_flFadeDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_FuncAreaPortalWindow::m_flTranslucencyLimit( )
{
	static const auto offset = netvars::get_ptr( )->at("C_FuncAreaPortalWindow.m_flTranslucencyLimit");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_FuncAreaPortalWindow::m_iBackgroundModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_FuncAreaPortalWindow.m_iBackgroundModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
