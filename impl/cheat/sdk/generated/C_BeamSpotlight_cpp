#include "C_BeamSpotlight.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_BeamSpotlight::m_nHaloIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_nHaloIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_BeamSpotlight::m_bSpotlightOn( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_bSpotlightOn");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BeamSpotlight::m_bHasDynamicLight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_bHasDynamicLight");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_BeamSpotlight::m_flSpotlightMaxLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_flSpotlightMaxLength");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BeamSpotlight::m_flSpotlightGoalWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_flSpotlightGoalWidth");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BeamSpotlight::m_flHDRColorScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_flHDRColorScale");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_BeamSpotlight::m_nRotationAxis( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_nRotationAxis");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_BeamSpotlight::m_flRotationSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BeamSpotlight.m_flRotationSpeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
