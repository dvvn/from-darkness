#include "C_PlantedC4.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/CBaseHandle.hpp"
#include <cstdint>

using namespace cheat;
using namespace csgo;

bool& C_PlantedC4::m_bBombDefused( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_bBombDefused");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_PlantedC4::m_bBombTicking( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_bBombTicking");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_PlantedC4::m_flC4Blow( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_flC4Blow");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_PlantedC4::m_flDefuseCountDown( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_flDefuseCountDown");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_PlantedC4::m_flDefuseLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_flDefuseLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_PlantedC4::m_flTimerLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_flTimerLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_PlantedC4::m_hBombDefuser( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_hBombDefuser");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_PlantedC4::m_nBombSite( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4", "m_nBombSite");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
