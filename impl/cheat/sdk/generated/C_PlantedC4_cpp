#include "C_PlantedC4.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_PlantedC4::m_bBombTicking( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_bBombTicking");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_PlantedC4::m_nBombSite( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_nBombSite");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_PlantedC4::m_flC4Blow( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_flC4Blow");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PlantedC4::m_flTimerLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_flTimerLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PlantedC4::m_flDefuseLength( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_flDefuseLength");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PlantedC4::m_flDefuseCountDown( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_flDefuseCountDown");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_PlantedC4::m_bBombDefused( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_bBombDefused");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_PlantedC4::m_hBombDefuser( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PlantedC4.m_hBombDefuser");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
