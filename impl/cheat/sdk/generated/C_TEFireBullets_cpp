#include "C_TEFireBullets.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEFireBullets::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::array<float, 2>& C_TEFireBullets::m_vecAngles( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_vecAngles");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<float, 2>>( );
}
int32_t& C_TEFireBullets::m_iWeaponID( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_iWeaponID");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFireBullets::m_weapon( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_weapon");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFireBullets::m_iMode( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_iMode");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFireBullets::m_iSeed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_iSeed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFireBullets::m_iPlayer( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_iPlayer");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEFireBullets::m_fInaccuracy( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_fInaccuracy");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEFireBullets::m_fSpread( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_fSpread");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_TEFireBullets::m_nItemDefIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_nItemDefIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEFireBullets::m_iSoundType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_iSoundType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEFireBullets::m_flRecoilIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEFireBullets.m_flRecoilIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
