#include "C_EnvQuadraticBeam.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

Vector& C_EnvQuadraticBeam::m_controlPosition( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvQuadraticBeam", "m_controlPosition");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
float& C_EnvQuadraticBeam::m_flWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvQuadraticBeam", "m_flWidth");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_EnvQuadraticBeam::m_scrollRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvQuadraticBeam", "m_scrollRate");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
Vector& C_EnvQuadraticBeam::m_targetPosition( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_EnvQuadraticBeam", "m_targetPosition");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
