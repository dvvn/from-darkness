#include "C_BaseCSGrenade.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_BaseCSGrenade::m_bRedraw( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_bRedraw");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseCSGrenade::m_bIsHeldByPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_bIsHeldByPlayer");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseCSGrenade::m_bPinPulled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_bPinPulled");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_BaseCSGrenade::m_fThrowTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_fThrowTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_BaseCSGrenade::m_bLoopingSoundPlaying( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_bLoopingSoundPlaying");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_BaseCSGrenade::m_flThrowStrength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenade.m_flThrowStrength");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
