#include "C_DangerZoneController.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_DangerZoneController::m_bDangerZoneControllerEnabled( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_bDangerZoneControllerEnabled");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_DangerZoneController::m_bMissionControlledExplosions( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_bMissionControlledExplosions");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_DangerZoneController::m_flStartTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_flStartTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_DangerZoneController::m_flFinalExpansionTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_flFinalExpansionTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
utl::Vector& C_DangerZoneController::m_vecEndGameCircleStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_vecEndGameCircleStart");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_DangerZoneController::m_vecEndGameCircleEnd( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_vecEndGameCircleEnd");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::array<int32_t, 42>& C_DangerZoneController::m_DangerZones( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_DangerZones");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 42>>( );
}
utl::array<float, 5>& C_DangerZoneController::m_flWaveEndTimes( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_flWaveEndTimes");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<float, 5>>( );
}
int32_t& C_DangerZoneController::m_hTheFinalZone( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DangerZoneController.m_hTheFinalZone");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
