#include "C_SpatialEntity.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_SpatialEntity::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
float& C_SpatialEntity::m_minFalloff( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity.m_minFalloff");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpatialEntity::m_maxFalloff( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity.m_maxFalloff");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_SpatialEntity::m_flCurWeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity.m_flCurWeight");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_SpatialEntity::m_bEnabled( )
{
	static const auto offset = netvars::get_ptr( )->at("C_SpatialEntity.m_bEnabled");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
