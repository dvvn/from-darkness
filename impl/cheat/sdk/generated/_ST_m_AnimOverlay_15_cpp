#include "_ST_m_AnimOverlay_15.h"

using namespace cheat;
using namespace csgo;

float& _ST_m_AnimOverlay_15::m_flCycle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_flCycle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& _ST_m_AnimOverlay_15::m_flPlaybackRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_flPlaybackRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& _ST_m_AnimOverlay_15::m_flPrevCycle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_flPrevCycle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& _ST_m_AnimOverlay_15::m_flWeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_flWeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& _ST_m_AnimOverlay_15::m_flWeightDeltaRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_flWeightDeltaRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& _ST_m_AnimOverlay_15::m_nOrder( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_nOrder");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& _ST_m_AnimOverlay_15::m_nSequence( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("_ST_m_AnimOverlay_15", "m_nSequence");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
