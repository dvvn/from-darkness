#include "C_BaseGrenade.h"

using namespace cheat;
using namespace csgo;

float& C_BaseGrenade::m_DmgRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_DmgRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_BaseGrenade::m_bIsLive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_bIsLive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_BaseGrenade::m_fFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_fFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_BaseGrenade::m_flDamage( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_flDamage");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_BaseGrenade::m_hThrower( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_hThrower");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
Vector& C_BaseGrenade::m_vecVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseGrenade", "m_vecVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
