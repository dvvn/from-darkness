#include "C_TestTraceline.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Color& C_TestTraceline::m_clrRender( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TestTraceline.m_clrRender");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Color>( );
#endif
}
utl::Vector& C_TestTraceline::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TestTraceline.m_vecOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
utl::QAngle& C_TestTraceline::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TestTraceline.m_angRotation");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::QAngle>( );
#endif
}
int32_t& C_TestTraceline::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TestTraceline.moveparent");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
