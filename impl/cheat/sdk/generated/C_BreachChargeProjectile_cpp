#include "C_BreachChargeProjectile.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_BreachChargeProjectile::m_bShouldExplode( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreachChargeProjectile.m_bShouldExplode");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_BreachChargeProjectile::m_weaponThatThrewMe( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreachChargeProjectile.m_weaponThatThrewMe");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BreachChargeProjectile::m_nParentBoneIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreachChargeProjectile.m_nParentBoneIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
utl::Vector& C_BreachChargeProjectile::m_vecParentBonePos( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreachChargeProjectile.m_vecParentBonePos");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
