#include "C_PlayerPing.h"

using namespace cheat;
using namespace csgo;

bool& C_PlayerPing::m_bUrgent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlayerPing", "m_bUrgent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
CBaseHandle& C_PlayerPing::m_hPingedEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlayerPing", "m_hPingedEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
CBaseHandle& C_PlayerPing::m_hPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlayerPing", "m_hPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_PlayerPing::m_iType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlayerPing", "m_iType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
char* C_PlayerPing::m_szPlaceName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PlayerPing", "m_szPlaceName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
