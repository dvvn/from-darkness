#include "C_CSRagdoll.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_CSRagdoll::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_CSRagdoll::m_vecRagdollOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_vecRagdollOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_CSRagdoll::m_hPlayer( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_hPlayer");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_CSRagdoll::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_CSRagdoll::m_nForceBone( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_nForceBone");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_CSRagdoll::m_vecForce( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_vecForce");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_CSRagdoll::m_vecRagdollVelocity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_vecRagdollVelocity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_CSRagdoll::m_iDeathPose( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_iDeathPose");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_CSRagdoll::m_iDeathFrame( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_iDeathFrame");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_CSRagdoll::m_iTeamNum( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_iTeamNum");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_CSRagdoll::m_bClientSideAnimation( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_bClientSideAnimation");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_CSRagdoll::m_flDeathYaw( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_flDeathYaw");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_CSRagdoll::m_flAbsYaw( )
{
	static const auto offset = netvars::get_ptr( )->at("C_CSRagdoll.m_flAbsYaw");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
