#include "C_BaseWeaponWorldModel.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_BaseWeaponWorldModel::m_nModelIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseWeaponWorldModel.m_nModelIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseWeaponWorldModel::m_nBody( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseWeaponWorldModel.m_nBody");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseWeaponWorldModel::m_fEffects( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseWeaponWorldModel.m_fEffects");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseWeaponWorldModel::moveparent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseWeaponWorldModel.moveparent");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseWeaponWorldModel::m_hCombatWeaponParent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseWeaponWorldModel.m_hCombatWeaponParent");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
