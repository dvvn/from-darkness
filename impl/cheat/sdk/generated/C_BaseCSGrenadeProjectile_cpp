#include "C_BaseCSGrenadeProjectile.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_BaseCSGrenadeProjectile::m_vInitialVelocity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenadeProjectile.m_vInitialVelocity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_BaseCSGrenadeProjectile::m_nBounces( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenadeProjectile.m_nBounces");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseCSGrenadeProjectile::m_nExplodeEffectIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenadeProjectile.m_nExplodeEffectIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BaseCSGrenadeProjectile::m_nExplodeEffectTickBegin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenadeProjectile.m_nExplodeEffectTickBegin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_BaseCSGrenadeProjectile::m_vecExplodeEffectOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BaseCSGrenadeProjectile.m_vecExplodeEffectOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
