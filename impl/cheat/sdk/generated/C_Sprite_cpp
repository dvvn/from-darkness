#include "C_Sprite.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

bool& C_Sprite::m_bWorldSpaceScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_bWorldSpaceScale");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_Sprite::m_flBrightnessTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flBrightnessTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flFrame( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flFrame");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flGlowProxySize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flGlowProxySize");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flHDRColorScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flHDRColorScale");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flScaleTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flScaleTime");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flSpriteFramerate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flSpriteFramerate");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Sprite::m_flSpriteScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_flSpriteScale");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_Sprite::m_hAttachedToEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_hAttachedToEntity");
	auto addr = address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_Sprite::m_nAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_nAttachment");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Sprite::m_nBrightness( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Sprite", "m_nBrightness");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
