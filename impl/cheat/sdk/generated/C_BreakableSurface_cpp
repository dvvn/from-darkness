#include "C_BreakableSurface.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_BreakableSurface::m_nNumWide( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_nNumWide");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_BreakableSurface::m_nNumHigh( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_nNumHigh");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_BreakableSurface::m_flPanelWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_flPanelWidth");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_BreakableSurface::m_flPanelHeight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_flPanelHeight");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
utl::Vector& C_BreakableSurface::m_vNormal( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_vNormal");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_BreakableSurface::m_vCorner( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_vCorner");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
bool& C_BreakableSurface::m_bIsBroken( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_bIsBroken");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_BreakableSurface::m_nSurfaceType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_nSurfaceType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::array<int32_t, 256>& C_BreakableSurface::m_RawPanelBitVec( )
{
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface.m_RawPanelBitVec");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 256>>( );
}
