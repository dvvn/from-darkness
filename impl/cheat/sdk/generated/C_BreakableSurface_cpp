#include "C_BreakableSurface.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"
#include <array>
#include <cstdint>

using namespace cheat;
using namespace csgo;

std::array<int32_t, 256>& C_BreakableSurface::m_RawPanelBitVec( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 256>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_RawPanelBitVec");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int32_t, 256>>( );
#endif
}
bool& C_BreakableSurface::m_bIsBroken( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_bIsBroken");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_BreakableSurface::m_flPanelHeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_flPanelHeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BreakableSurface::m_flPanelWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_flPanelWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_BreakableSurface::m_nNumHigh( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_nNumHigh");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BreakableSurface::m_nNumWide( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_nNumWide");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BreakableSurface::m_nSurfaceType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_nSurfaceType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_BreakableSurface::m_vCorner( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_vCorner");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_BreakableSurface::m_vNormal( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BreakableSurface", "m_vNormal");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
