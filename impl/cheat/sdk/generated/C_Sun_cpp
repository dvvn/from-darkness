#include "C_Sun.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Color& C_Sun::m_clrRender( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_clrRender");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Color>( );
}
utl::Color& C_Sun::m_clrOverlay( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_clrOverlay");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Color>( );
}
utl::Vector& C_Sun::m_vDirection( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_vDirection");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
bool& C_Sun::m_bOn( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_bOn");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_Sun::m_nSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_nSize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Sun::m_nOverlaySize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_nOverlaySize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Sun::m_nMaterial( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_nMaterial");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Sun::m_nOverlayMaterial( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.m_nOverlayMaterial");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_Sun::HDRColorScale( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.HDRColorScale");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_Sun::glowDistanceScale( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Sun.glowDistanceScale");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
