#include "C_BaseAttributableItem.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_BaseAttributableItem::m_hOuter( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_hOuter");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_ProviderType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_ProviderType");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iReapplyProvisionParity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iReapplyProvisionParity");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iItemDefinitionIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iItemDefinitionIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iEntityLevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iEntityLevel");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iItemIDHigh( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iItemIDHigh");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iItemIDLow( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iItemIDLow");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iAccountID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iAccountID");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_iEntityQuality( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_iEntityQuality");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_BaseAttributableItem::m_bInitialized( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_bInitialized");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
char* C_BaseAttributableItem::m_szCustomName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_szCustomName");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
utl::array<_ST_m_Attributes_32, 32>& C_BaseAttributableItem::m_Attributes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<_ST_m_Attributes_32, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_Attributes");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<_ST_m_Attributes_32, 32>>( );
#endif
}
int32_t& C_BaseAttributableItem::m_OriginalOwnerXuidLow( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_OriginalOwnerXuidLow");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_OriginalOwnerXuidHigh( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_OriginalOwnerXuidHigh");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_nFallbackPaintKit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_nFallbackPaintKit");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_BaseAttributableItem::m_nFallbackSeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_nFallbackSeed");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_BaseAttributableItem::m_flFallbackWear( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_flFallbackWear");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_BaseAttributableItem::m_nFallbackStatTrak( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseAttributableItem.m_nFallbackStatTrak");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
