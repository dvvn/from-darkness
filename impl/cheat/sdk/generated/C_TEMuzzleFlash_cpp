#include "C_TEMuzzleFlash.h"

using namespace cheat;
using namespace csgo;

float& C_TEMuzzleFlash::m_flScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_flScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_TEMuzzleFlash::m_nType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_nType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
QAngle& C_TEMuzzleFlash::m_vecAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_vecAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<QAngle>( );
#endif
}
Vector& C_TEMuzzleFlash::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
