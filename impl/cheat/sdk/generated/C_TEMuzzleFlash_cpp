#include "C_TEMuzzleFlash.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat\sdk\QAngle.hpp"
#include "cheat\sdk\Vector.hpp"

using namespace cheat::csgo;

cheat::csgo::Vector& C_TEMuzzleFlash::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::QAngle& C_TEMuzzleFlash::m_vecAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_vecAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
float& C_TEMuzzleFlash::m_flScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_flScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_TEMuzzleFlash::m_nType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEMuzzleFlash", "m_nType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
