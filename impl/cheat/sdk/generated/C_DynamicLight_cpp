#include "C_DynamicLight.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_DynamicLight::m_Flags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_Flags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_DynamicLight::m_LightStyle( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_LightStyle");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_DynamicLight::m_Radius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_Radius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_DynamicLight::m_Exponent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_Exponent");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_DynamicLight::m_InnerAngle( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_InnerAngle");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_DynamicLight::m_OuterAngle( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_OuterAngle");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_DynamicLight::m_SpotRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_DynamicLight.m_SpotRadius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
