#include "C_CSPlayerResource.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"
#include <array>

using namespace cheat::csgo;

std::array<int, 65>& C_CSPlayerResource::m_bControllingBot( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bControllingBot");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
bool& C_CSPlayerResource::m_bEndMatchNextMapAllVoted( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bEndMatchNextMapAllVoted");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_bHasCommunicationAbuseMute( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bHasCommunicationAbuseMute");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_bHasDefuser( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bHasDefuser");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_bHasHelmet( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bHasHelmet");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 12>& C_CSPlayerResource::m_bHostageAlive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 12>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bHostageAlive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 12>>( );
#endif
}
cheat::csgo::Vector& C_CSPlayerResource::m_bombsiteCenterA( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bombsiteCenterA");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_CSPlayerResource::m_bombsiteCenterB( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_bombsiteCenterB");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
std::array<int, 4>& C_CSPlayerResource::m_hostageRescueX( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_hostageRescueX");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 4>& C_CSPlayerResource::m_hostageRescueY( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_hostageRescueY");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 4>& C_CSPlayerResource::m_hostageRescueZ( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_hostageRescueZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iArmor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iArmor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iBotDifficulty( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iBotDifficulty");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iCashSpentThisRound( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iCashSpentThisRound");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iCompTeammateColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iCompTeammateColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iCompetitiveRankType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iCompetitiveRankType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iCompetitiveRanking( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iCompetitiveRanking");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iCompetitiveWins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iCompetitiveWins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iControlledByPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iControlledByPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iControlledPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iControlledPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iGunGameLevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iGunGameLevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 12>& C_CSPlayerResource::m_iHostageEntityIDs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 12>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iHostageEntityIDs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 12>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iLifetimeEnd( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iLifetimeEnd");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iLifetimeStart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iLifetimeStart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMVPs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMVPs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_3k_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_3k_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_4k_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_4k_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_5k_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_5k_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_Assists_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_Assists_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_CashEarned_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_CashEarned_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_Damage_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_Damage_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_Deaths_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_Deaths_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_EnemiesFlashed_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_EnemiesFlashed_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_EquipmentValue_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_EquipmentValue_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_HeadShotKills_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_HeadShotKills_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_KillReward_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_KillReward_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_Kills_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_Kills_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_LiveTime_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_LiveTime_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_Objective_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_Objective_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iMatchStats_UtilityDamage_Total( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iMatchStats_UtilityDamage_Total");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
int& C_CSPlayerResource::m_iPlayerC4( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iPlayerC4");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_CSPlayerResource::m_iPlayerVIP( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iPlayerVIP");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iScore( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iScore");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_iTotalCashSpent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_iTotalCashSpent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 12>& C_CSPlayerResource::m_isHostageFollowingSomeone( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 12>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_isHostageFollowingSomeone");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 12>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nActiveCoinRank( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nActiveCoinRank");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nCharacterDefIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nCharacterDefIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nEndMatchNextMapVotes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nEndMatchNextMapVotes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nMusicID( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nMusicID");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nPersonaDataPublicCommendsFriendly( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nPersonaDataPublicCommendsFriendly");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nPersonaDataPublicCommendsLeader( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nPersonaDataPublicCommendsLeader");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nPersonaDataPublicCommendsTeacher( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nPersonaDataPublicCommendsTeacher");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 65>& C_CSPlayerResource::m_nPersonaDataPublicLevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_nPersonaDataPublicLevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<char*, 65>& C_CSPlayerResource::m_szClan( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<char*, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_szClan");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<char*, 65>>( );
#endif
}
std::array<char*, 65>& C_CSPlayerResource::m_szCrosshairCodes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<char*, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_CSPlayerResource", "m_szCrosshairCodes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<char*, 65>>( );
#endif
}
