#include "C_Embers.h"

using namespace cheat;
using namespace csgo;

bool& C_Embers::m_bEmit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Embers", "m_bEmit");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_Embers::m_nDensity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Embers", "m_nDensity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Embers::m_nLifetime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Embers", "m_nLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Embers::m_nSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Embers", "m_nSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
