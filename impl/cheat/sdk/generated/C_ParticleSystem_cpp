#include "C_ParticleSystem.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_ParticleSystem::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_vecOrigin");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
int32_t& C_ParticleSystem::m_fEffects( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_fEffects");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_ParticleSystem::m_hOwnerEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_hOwnerEntity");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_ParticleSystem::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.moveparent");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_ParticleSystem::m_iParentAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_iParentAttachment");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
utl::QAngle& C_ParticleSystem::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_angRotation");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::QAngle>( );
#endif
}
int32_t& C_ParticleSystem::m_iEffectIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_iEffectIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_ParticleSystem::m_bActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_bActive");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_ParticleSystem::m_nStopType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_nStopType");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_ParticleSystem::m_flStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_flStartTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
char* C_ParticleSystem::m_szSnapshotFileName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_szSnapshotFileName");
	auto addr = utl::address(this).add(offset);
	return addr.raw<char>( );
#endif
}
utl::array<utl::Vector, 4>& C_ParticleSystem::m_vServerControlPoints( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<utl::Vector, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_vServerControlPoints");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<utl::Vector, 4>>( );
#endif
}
utl::array<int32_t, 4>& C_ParticleSystem::m_iServerControlPointAssignments( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_iServerControlPointAssignments");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 4>>( );
#endif
}
utl::array<int32_t, 63>& C_ParticleSystem::m_hControlPointEnts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 63>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_hControlPointEnts");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 63>>( );
#endif
}
utl::array<int32_t, 63>& C_ParticleSystem::m_iControlPointParents( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::array<int32_t, 63>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem.m_iControlPointParents");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 63>>( );
#endif
}
