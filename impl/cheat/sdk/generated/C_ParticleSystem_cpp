#include "C_ParticleSystem.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat\sdk\CBaseHandle.hpp"
#include "cheat\sdk\QAngle.hpp"
#include "cheat\sdk\Vector.hpp"
#include <array<cheat::csgo::Vector, 4>>
#include <array<int, 4>>
#include <array<int, 63>>

using namespace cheat::csgo;

cheat::csgo::Vector& C_ParticleSystem::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_ParticleSystem::m_fEffects( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_fEffects");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::CBaseHandle& C_ParticleSystem::m_hOwnerEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_hOwnerEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
int& C_ParticleSystem::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "moveparent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_ParticleSystem::m_iParentAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_iParentAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::QAngle& C_ParticleSystem::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_angRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
int& C_ParticleSystem::m_iEffectIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_iEffectIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_ParticleSystem::m_bActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_bActive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_ParticleSystem::m_nStopType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_nStopType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_ParticleSystem::m_flStartTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_flStartTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
char* C_ParticleSystem::m_szSnapshotFileName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_szSnapshotFileName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
std::array<cheat::csgo::Vector, 4>& C_ParticleSystem::m_vServerControlPoints( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<cheat::csgo::Vector, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_vServerControlPoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<cheat::csgo::Vector, 4>>( );
#endif
}
std::array<int, 4>& C_ParticleSystem::m_iServerControlPointAssignments( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 4>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_iServerControlPointAssignments");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 4>>( );
#endif
}
std::array<int, 63>& C_ParticleSystem::m_hControlPointEnts( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 63>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_hControlPointEnts");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 63>>( );
#endif
}
std::array<int, 63>& C_ParticleSystem::m_iControlPointParents( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 63>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ParticleSystem", "m_iControlPointParents");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 63>>( );
#endif
}
