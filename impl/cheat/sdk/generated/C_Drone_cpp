#include "C_Drone.h"

using namespace cheat;
using namespace csgo;

bool& C_Drone::m_bPilotTakeoverAllowed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_bPilotTakeoverAllowed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
CBaseHandle& C_Drone::m_hCurrentPilot( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_hCurrentPilot");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
CBaseHandle& C_Drone::m_hDeliveryCargo( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_hDeliveryCargo");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
CBaseHandle& C_Drone::m_hMoveToThisEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_hMoveToThisEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
CBaseHandle& C_Drone::m_hPotentialCargo( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_hPotentialCargo");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
std::array<int32_t, 24>& C_Drone::m_vecTagIncrements( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int32_t, 24>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_vecTagIncrements");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int32_t, 24>>( );
#endif
}
std::array<Vector, 24>& C_Drone::m_vecTagPositions( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<Vector, 24>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Drone", "m_vecTagPositions");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<Vector, 24>>( );
#endif
}
