#include "C_Drone.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_Drone::m_hMoveToThisEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_hMoveToThisEntity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Drone::m_hDeliveryCargo( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_hDeliveryCargo");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_Drone::m_bPilotTakeoverAllowed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_bPilotTakeoverAllowed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_Drone::m_hPotentialCargo( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_hPotentialCargo");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_Drone::m_hCurrentPilot( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_hCurrentPilot");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::array<utl::Vector, 24>& C_Drone::m_vecTagPositions( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_vecTagPositions");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<utl::Vector, 24>>( );
}
utl::array<int32_t, 24>& C_Drone::m_vecTagIncrements( )
{
	static const auto offset = netvars::get_ptr( )->at("C_Drone.m_vecTagIncrements");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 24>>( );
}
