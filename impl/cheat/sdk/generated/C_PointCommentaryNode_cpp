#include "C_PointCommentaryNode.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_PointCommentaryNode::m_bActive( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_bActive");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_PointCommentaryNode::m_flStartTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_flStartTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
char* C_PointCommentaryNode::m_iszCommentaryFile( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_iszCommentaryFile");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_PointCommentaryNode::m_iszCommentaryFileNoHDR( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_iszCommentaryFileNoHDR");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_PointCommentaryNode::m_iszSpeakers( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_iszSpeakers");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
int32_t& C_PointCommentaryNode::m_iNodeNumber( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_iNodeNumber");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_PointCommentaryNode::m_iNodeNumberMax( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_iNodeNumberMax");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_PointCommentaryNode::m_hViewPosition( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PointCommentaryNode.m_hViewPosition");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
