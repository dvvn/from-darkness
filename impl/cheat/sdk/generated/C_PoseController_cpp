#include "C_PoseController.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::array<int32_t, 4>& C_PoseController::m_hProps( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_hProps");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 4>>( );
}
utl::array<int32_t, 4>& C_PoseController::m_chPoseIndex( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_chPoseIndex");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::array<int32_t, 4>>( );
}
bool& C_PoseController::m_bPoseValueParity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_bPoseValueParity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_PoseController::m_fPoseValue( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fPoseValue");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PoseController::m_fInterpolationTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fInterpolationTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
bool& C_PoseController::m_bInterpolationWrap( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_bInterpolationWrap");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_PoseController::m_fCycleFrequency( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fCycleFrequency");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
int32_t& C_PoseController::m_nFModType( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_nFModType");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_PoseController::m_fFModTimeOffset( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fFModTimeOffset");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PoseController::m_fFModRate( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fFModRate");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_PoseController::m_fFModAmplitude( )
{
	static const auto offset = netvars::get_ptr( )->at("C_PoseController.m_fFModAmplitude");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
