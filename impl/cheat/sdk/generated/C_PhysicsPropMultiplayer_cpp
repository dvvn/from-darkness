#include "C_PhysicsPropMultiplayer.h"

using namespace cheat;
using namespace csgo;

Vector& C_PhysicsPropMultiplayer::m_collisionMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PhysicsPropMultiplayer", "m_collisionMaxs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_PhysicsPropMultiplayer::m_collisionMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PhysicsPropMultiplayer", "m_collisionMins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
float& C_PhysicsPropMultiplayer::m_fMass( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PhysicsPropMultiplayer", "m_fMass");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_PhysicsPropMultiplayer::m_iPhysicsMode( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PhysicsPropMultiplayer", "m_iPhysicsMode");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
