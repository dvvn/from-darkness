#include "C_TEDynamicLight.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEDynamicLight::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEDynamicLight::r( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.r");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEDynamicLight::g( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.g");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEDynamicLight::b( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.b");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEDynamicLight::exponent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.exponent");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_TEDynamicLight::m_fRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.m_fRadius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEDynamicLight::m_fTime( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.m_fTime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_TEDynamicLight::m_fDecay( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight.m_fDecay");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
