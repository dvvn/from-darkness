#include "C_TEDynamicLight.h"

using namespace cheat;
using namespace csgo;

int32_t& C_TEDynamicLight::b( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "b");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEDynamicLight::exponent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "exponent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEDynamicLight::g( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "g");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_TEDynamicLight::m_fDecay( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fDecay");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEDynamicLight::m_fRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEDynamicLight::m_fTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_fTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
Vector& C_TEDynamicLight::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
int32_t& C_TEDynamicLight::r( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEDynamicLight", "r");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
