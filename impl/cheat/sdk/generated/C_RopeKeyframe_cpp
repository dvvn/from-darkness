#include "C_RopeKeyframe.h"

using namespace cheat;
using namespace csgo;

int32_t& C_RopeKeyframe::m_RopeFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_RopeFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_RopeLength( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_RopeLength");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_Slack( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_Slack");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_Subdiv( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_Subdiv");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_RopeKeyframe::m_TextureScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_TextureScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_RopeKeyframe::m_Width( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_Width");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_RopeKeyframe::m_bConstrainBetweenEndpoints( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_bConstrainBetweenEndpoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_RopeKeyframe::m_fLockedPoints( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_fLockedPoints");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_RopeKeyframe::m_flScrollSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_flScrollSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
CBaseHandle& C_RopeKeyframe::m_hEndPoint( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_hEndPoint");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
CBaseHandle& C_RopeKeyframe::m_hStartPoint( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_hStartPoint");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
int32_t& C_RopeKeyframe::m_iDefaultRopeMaterialModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_iDefaultRopeMaterialModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_iEndAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_iEndAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_iParentAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_iParentAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_iRopeMaterialModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_iRopeMaterialModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_iStartAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_iStartAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nChangeCount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nChangeCount");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nMaxCPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nMaxCPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nMaxGPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nMaxGPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nMinCPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nMinCPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nMinGPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nMinGPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_RopeKeyframe::m_nSegments( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_nSegments");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_RopeKeyframe::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
int32_t& C_RopeKeyframe::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RopeKeyframe", "moveparent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
