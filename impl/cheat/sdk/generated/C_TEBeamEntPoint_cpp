#include "C_TEBeamEntPoint.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_TEBeamEntPoint::m_nStartEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBeamEntPoint.m_nStartEntity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBeamEntPoint::m_nEndEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBeamEntPoint.m_nEndEntity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_TEBeamEntPoint::m_vecStartPoint( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBeamEntPoint.m_vecStartPoint");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEBeamEntPoint::m_vecEndPoint( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBeamEntPoint.m_vecEndPoint");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
