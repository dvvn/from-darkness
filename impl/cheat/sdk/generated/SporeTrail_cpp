#include "SporeTrail.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Vector.hpp"

using namespace cheat::csgo;

bool& SporeTrail::m_bEmit( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_bEmit");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& SporeTrail::m_flEndSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_flEndSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SporeTrail::m_flParticleLifetime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_flParticleLifetime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SporeTrail::m_flSpawnRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_flSpawnRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SporeTrail::m_flSpawnRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_flSpawnRate");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& SporeTrail::m_flStartSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_flStartSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
cheat::csgo::Vector& SporeTrail::m_vecEndColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("SporeTrail", "m_vecEndColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
