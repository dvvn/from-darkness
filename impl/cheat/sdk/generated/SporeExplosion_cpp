#include "SporeExplosion.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

float& SporeExplosion::m_flSpawnRate( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_flSpawnRate");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flParticleLifetime( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_flParticleLifetime");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flStartSize( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_flStartSize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flEndSize( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_flEndSize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& SporeExplosion::m_flSpawnRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_flSpawnRadius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
bool& SporeExplosion::m_bEmit( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_bEmit");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& SporeExplosion::m_bDontRemove( )
{
	static const auto offset = netvars::get_ptr( )->at("SporeExplosion.m_bDontRemove");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
