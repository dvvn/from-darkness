#include "C_Func_Dust.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

int32_t& C_Func_Dust::m_Color( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_Color");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_DistMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_DistMax");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_DustFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_DustFlags");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_Func_Dust::m_FallSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_FallSpeed");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_Func_Dust::m_LifetimeMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_LifetimeMax");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_LifetimeMin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_LifetimeMin");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_SpawnRate( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_SpawnRate");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_SpeedMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_SpeedMax");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_Func_Dust::m_bAffectedByWind( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_bAffectedByWind");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_Func_Dust::m_flSizeMax( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_flSizeMax");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_Func_Dust::m_flSizeMin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_flSizeMin");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_Func_Dust::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_nModelIndex");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_nSolidType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_nSolidType");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_nSurroundType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_nSurroundType");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_triggerBloat( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_triggerBloat");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_Func_Dust::m_usSolidFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_usSolidFlags");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_Func_Dust::m_vecMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_vecMaxs");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_Func_Dust::m_vecMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_vecMins");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_Func_Dust::m_vecSpecifiedSurroundingMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_vecSpecifiedSurroundingMaxs");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_Func_Dust::m_vecSpecifiedSurroundingMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_Func_Dust", "m_vecSpecifiedSurroundingMins");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
