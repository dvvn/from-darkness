#include "C_BaseEntity.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/CBaseHandle.hpp"
#include "cheat/sdk/Color.hpp"
#include "cheat/sdk/QAngle.hpp"
#include "cheat/sdk/Vector.hpp"
#include <array>

using namespace cheat::csgo;

float& C_BaseEntity::m_flAnimTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flAnimTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flSimulationTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flSimulationTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseEntity::m_cellbits( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_cellbits");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_cellX( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_cellX");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_cellY( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_cellY");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_cellZ( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_cellZ");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::QAngle& C_BaseEntity::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_angRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
short& C_BaseEntity::m_nModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(short*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nModelIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<short>( );
#endif
}
int& C_BaseEntity::m_fEffects( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_fEffects");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
signed char& C_BaseEntity::m_nRenderMode( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nRenderMode");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
signed char& C_BaseEntity::m_nRenderFX( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nRenderFX");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
cheat::csgo::Color& C_BaseEntity::m_clrRender( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_clrRender");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
#endif
}
int& C_BaseEntity::m_iTeamNum( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iTeamNum");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_iPendingTeamNum( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iPendingTeamNum");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_CollisionGroup( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_CollisionGroup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_BaseEntity::m_flElasticity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flElasticity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flShadowCastDistance( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flShadowCastDistance");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseEntity::m_hOwnerEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_hOwnerEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseEntity::m_hEffectEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_hEffectEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
int& C_BaseEntity::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "moveparent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_iParentAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iParentAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
char* C_BaseEntity::m_iName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
int& C_BaseEntity::movetype( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "movetype");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::movecollide( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "movecollide");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecMins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecMaxs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_BaseEntity::m_nSolidType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nSolidType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_usSolidFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_usSolidFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_nSurroundType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nSurroundType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_triggerBloat( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_triggerBloat");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecSpecifiedSurroundingMins( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecSpecifiedSurroundingMins");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecSpecifiedSurroundingMaxs( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecSpecifiedSurroundingMaxs");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_BaseEntity::m_iTextureFrameIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iTextureFrameIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_BaseEntity::m_bSimulatedEveryTick( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bSimulatedEveryTick");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseEntity::m_bAnimatedEveryTick( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bAnimatedEveryTick");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseEntity::m_bAlternateSorting( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bAlternateSorting");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_BaseEntity::m_bSpotted( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bSpotted");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
std::array<int, 65>& C_BaseEntity::m_bSpottedBy( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 65>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bSpottedBy");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 65>>( );
#endif
}
std::array<int, 2>& C_BaseEntity::m_bSpottedByMask( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 2>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bSpottedByMask");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 2>>( );
#endif
}
bool& C_BaseEntity::m_bIsAutoaimTarget( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bIsAutoaimTarget");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_BaseEntity::m_fadeMinDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_fadeMinDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_fadeMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_fadeMaxDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flFadeScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flFadeScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseEntity::m_nMinCPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nMinCPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_nMaxCPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nMaxCPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_nMinGPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nMinGPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
int& C_BaseEntity::m_nMaxGPULevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nMaxGPULevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_BaseEntity::m_flUseLookAtAngle( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flUseLookAtAngle");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flLastMadeNoiseTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flLastMadeNoiseTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flMaxFallVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flMaxFallVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_BaseEntity::m_bEligibleForScreenHighlight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bEligibleForScreenHighlight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
char* C_BaseEntity::m_ModelName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_ModelName");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecAbsOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecAbsOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::QAngle& C_BaseEntity::m_angAbsRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_angAbsRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
float& C_BaseEntity::m_rgflCoordinateFrame( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_rgflCoordinateFrame");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseEntity::m_fFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_fFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
signed char& C_BaseEntity::m_MoveType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_MoveType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
signed char& C_BaseEntity::m_MoveCollide( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_MoveCollide");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecAbsVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecAbsVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecViewOffset( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecViewOffset");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
float& C_BaseEntity::m_flFriction( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flFriction");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int& C_BaseEntity::m_iHealth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iHealth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseEntity::m_hNetworkMoveParent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_hNetworkMoveParent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecNetworkOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecNetworkOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::QAngle& C_BaseEntity::m_angNetworkAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_angNetworkAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::QAngle>( );
#endif
}
cheat::csgo::CBaseHandle& C_BaseEntity::m_hGroundEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_hGroundEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
signed char& C_BaseEntity::m_nWaterLevel( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nWaterLevel");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
signed char& C_BaseEntity::m_nWaterType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(signed char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_nWaterType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<signed char>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecAngVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecAngVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
cheat::csgo::Vector& C_BaseEntity::m_vecBaseVelocity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_vecBaseVelocity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Vector>( );
#endif
}
int& C_BaseEntity::m_iEFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_iEFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
float& C_BaseEntity::m_flGravity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flGravity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_BaseEntity::m_flProxyRandomValue( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_flProxyRandomValue");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
bool& C_BaseEntity::m_bEverHadPredictionErrorsForThisCommand( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_bEverHadPredictionErrorsForThisCommand");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
cheat::csgo::VarMapping_t& C_BaseEntity::m_InterpVarMap( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::VarMapping_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_InterpVarMap");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::VarMapping_t>( );
#endif
}
cheat::csgo::CUtlVector<cheat::csgo::matrix3x4_t>& C_BaseEntity::m_BonesCache( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CUtlVector<cheat::csgo::matrix3x4_t>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_BaseEntity", "m_BonesCache");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CUtlVector<cheat::csgo::matrix3x4_t>>( );
#endif
}
