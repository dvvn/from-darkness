#include "C_TEPlayerDecal.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEPlayerDecal::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEPlayerDecal::m_vecStart( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_vecStart");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::Vector& C_TEPlayerDecal::m_vecRight( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_vecRight");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEPlayerDecal::m_nEntity( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_nEntity");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEPlayerDecal::m_nPlayer( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_nPlayer");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEPlayerDecal::m_nHitbox( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEPlayerDecal.m_nHitbox");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
