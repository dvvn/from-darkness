#include "C_TEBloodStream.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Vector& C_TEBloodStream::m_vecDirection( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.m_vecDirection");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
int32_t& C_TEBloodStream::r( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.r");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBloodStream::g( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.g");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBloodStream::b( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.b");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBloodStream::a( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.a");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_TEBloodStream::m_nAmount( )
{
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream.m_nAmount");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
