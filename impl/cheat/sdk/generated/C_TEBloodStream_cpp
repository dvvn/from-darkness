#include "C_TEBloodStream.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

int32_t& C_TEBloodStream::a( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "a");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEBloodStream::b( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "b");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEBloodStream::g( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "g");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEBloodStream::m_nAmount( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "m_nAmount");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_TEBloodStream::m_vecDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "m_vecDirection");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
int32_t& C_TEBloodStream::r( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEBloodStream", "r");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
