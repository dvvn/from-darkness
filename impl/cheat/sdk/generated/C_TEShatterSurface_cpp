#include "C_TEShatterSurface.h"

using namespace cheat;
using namespace csgo;

float& C_TEShatterSurface::m_flHeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flHeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEShatterSurface::m_flShardSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flShardSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEShatterSurface::m_flWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_flWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_TEShatterSurface::m_nSurfaceType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_nSurfaceType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Color& C_TEShatterSurface::m_uchBackColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_uchBackColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Color>( );
#endif
}
Color& C_TEShatterSurface::m_uchFrontColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_uchFrontColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Color>( );
#endif
}
QAngle& C_TEShatterSurface::m_vecAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<QAngle>( );
#endif
}
Vector& C_TEShatterSurface::m_vecForce( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecForce");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_TEShatterSurface::m_vecForcePos( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecForcePos");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
Vector& C_TEShatterSurface::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEShatterSurface", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
