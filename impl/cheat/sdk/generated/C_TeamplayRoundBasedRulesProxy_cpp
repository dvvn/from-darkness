#include "C_TeamplayRoundBasedRulesProxy.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include <array<float, 32>>
#include <array<int, 32>>

using namespace cheat::csgo;

int& C_TeamplayRoundBasedRulesProxy::m_iRoundState( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_iRoundState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bInWaitingForPlayers( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bInWaitingForPlayers");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int& C_TeamplayRoundBasedRulesProxy::m_iWinningTeam( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_iWinningTeam");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bInOvertime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bInOvertime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bInSetup( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bInSetup");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bSwitchedTeamsThisRound( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bSwitchedTeamsThisRound");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bAwaitingReadyRestart( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bAwaitingReadyRestart");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_TeamplayRoundBasedRulesProxy::m_flRestartRoundTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_flRestartRoundTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TeamplayRoundBasedRulesProxy::m_flMapResetTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_flMapResetTime");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
std::array<float, 32>& C_TeamplayRoundBasedRulesProxy::m_flNextRespawnWave( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_flNextRespawnWave");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 32>>( );
#endif
}
std::array<float, 32>& C_TeamplayRoundBasedRulesProxy::m_TeamRespawnWaveTimes( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<float, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_TeamRespawnWaveTimes");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<float, 32>>( );
#endif
}
std::array<int, 32>& C_TeamplayRoundBasedRulesProxy::m_bTeamReady( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<int, 32>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bTeamReady");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<int, 32>>( );
#endif
}
bool& C_TeamplayRoundBasedRulesProxy::m_bStopWatch( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TeamplayRoundBasedRulesProxy", "m_bStopWatch");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
