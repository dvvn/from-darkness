#include "C_ShadowControl.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace utl;
using namespace csgo;

bool& C_ShadowControl::m_bDisableShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_bDisableShadows");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_ShadowControl::m_bEnableLocalLightShadows( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_bEnableLocalLightShadows");
	auto addr = address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_ShadowControl::m_flShadowMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_flShadowMaxDist");
	auto addr = address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_ShadowControl::m_shadowColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_shadowColor");
	auto addr = address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_ShadowControl::m_shadowDirection( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_ShadowControl", "m_shadowDirection");
	auto addr = address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
