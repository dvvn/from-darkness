#include "C_WorldVguiText.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

bool& C_WorldVguiText::m_bEnabled( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_bEnabled");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
char* C_WorldVguiText::m_szDisplayText( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_szDisplayText");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_WorldVguiText::m_szDisplayTextOption( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_szDisplayTextOption");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
char* C_WorldVguiText::m_szFont( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_szFont");
	auto addr = utl::mem::address(this).add(offset);
	return addr.raw<char>( );
}
int32_t& C_WorldVguiText::m_iTextPanelWidth( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_iTextPanelWidth");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Color& C_WorldVguiText::m_clrText( )
{
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText.m_clrText");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Color>( );
}
