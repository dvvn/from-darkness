#include "C_WorldVguiText.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/Color.hpp"

using namespace cheat::csgo;

bool& C_WorldVguiText::m_bEnabled( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_bEnabled");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
cheat::csgo::Color& C_WorldVguiText::m_clrText( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_clrText");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::Color>( );
#endif
}
int& C_WorldVguiText::m_iTextPanelWidth( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_iTextPanelWidth");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
char* C_WorldVguiText::m_szDisplayText( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_szDisplayText");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_WorldVguiText::m_szDisplayTextOption( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_szDisplayTextOption");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
char* C_WorldVguiText::m_szFont( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return (char*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_WorldVguiText", "m_szFont");
	auto addr = nstd::address(this).add(offset);
	return addr.ptr<char>( );
#endif
}
