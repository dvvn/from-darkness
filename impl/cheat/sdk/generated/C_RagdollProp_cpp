#include "C_RagdollProp.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/CBaseHandle.hpp"
#include <array>

using namespace cheat::csgo;

float& C_RagdollProp::m_flBlendWeight( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RagdollProp", "m_flBlendWeight");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
cheat::csgo::CBaseHandle& C_RagdollProp::m_hUnragdoll( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(cheat::csgo::CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RagdollProp", "m_hUnragdoll");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<cheat::csgo::CBaseHandle>( );
#endif
}
int& C_RagdollProp::m_nOverlaySequence( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RagdollProp", "m_nOverlaySequence");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int>( );
#endif
}
std::array<cheat::csgo::QAngle, 24>& C_RagdollProp::m_ragAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<cheat::csgo::QAngle, 24>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RagdollProp", "m_ragAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<cheat::csgo::QAngle, 24>>( );
#endif
}
std::array<cheat::csgo::Vector, 24>& C_RagdollProp::m_ragPos( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(std::array<cheat::csgo::Vector, 24>*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_RagdollProp", "m_ragPos");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<std::array<cheat::csgo::Vector, 24>>( );
#endif
}
