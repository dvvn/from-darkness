#include "C_TEEffectDispatch.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/QAngle.hpp"
#include "cheat/sdk/Vector.hpp"
#include <cstdint>

using namespace cheat;
using namespace csgo;

int32_t& C_TEEffectDispatch::entindex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "entindex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_TEEffectDispatch::m_bPositionsAreRelativeToEntity( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_bPositionsAreRelativeToEntity");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
int32_t& C_TEEffectDispatch::m_fFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_fFlags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
float& C_TEEffectDispatch::m_flMagnitude( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_flMagnitude");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEEffectDispatch::m_flRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_flRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_TEEffectDispatch::m_flScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_flScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_TEEffectDispatch::m_iEffectName( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_iEffectName");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nAttachmentIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nAttachmentIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nColor( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nColor");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nDamageType( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nDamageType");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nHitBox( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nHitBox");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nMaterial( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nMaterial");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nOtherEntIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nOtherEntIndex");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_TEEffectDispatch::m_nSurfaceProp( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_nSurfaceProp");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
QAngle& C_TEEffectDispatch::m_vAngles( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_vAngles");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<QAngle>( );
#endif
}
Vector& C_TEEffectDispatch::m_vNormal( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_TEEffectDispatch", "m_vNormal");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
