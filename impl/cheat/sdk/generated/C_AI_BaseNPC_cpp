#include "C_AI_BaseNPC.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_AI_BaseNPC::m_lifeState( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_lifeState");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_AI_BaseNPC::m_bPerformAvoidance( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_bPerformAvoidance");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_AI_BaseNPC::m_bIsMoving( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_bIsMoving");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_AI_BaseNPC::m_bFadeCorpse( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_bFadeCorpse");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
int32_t& C_AI_BaseNPC::m_iDeathPose( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_iDeathPose");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_AI_BaseNPC::m_iDeathFrame( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_iDeathFrame");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_AI_BaseNPC::m_iSpeedModRadius( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_iSpeedModRadius");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_AI_BaseNPC::m_iSpeedModSpeed( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_iSpeedModSpeed");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
bool& C_AI_BaseNPC::m_bSpeedModActive( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_bSpeedModActive");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
bool& C_AI_BaseNPC::m_bImportanRagdoll( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_bImportanRagdoll");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<bool>( );
}
float& C_AI_BaseNPC::m_flTimePingEffect( )
{
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC.m_flTimePingEffect");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
