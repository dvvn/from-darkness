#include "C_AI_BaseNPC.h"

using namespace cheat;
using namespace csgo;

bool& C_AI_BaseNPC::m_bFadeCorpse( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_bFadeCorpse");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_AI_BaseNPC::m_bImportanRagdoll( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_bImportanRagdoll");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_AI_BaseNPC::m_bIsMoving( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_bIsMoving");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_AI_BaseNPC::m_bPerformAvoidance( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_bPerformAvoidance");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_AI_BaseNPC::m_bSpeedModActive( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_bSpeedModActive");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
float& C_AI_BaseNPC::m_flTimePingEffect( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_flTimePingEffect");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_AI_BaseNPC::m_iDeathFrame( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_iDeathFrame");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_AI_BaseNPC::m_iDeathPose( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_iDeathPose");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_AI_BaseNPC::m_iSpeedModRadius( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_iSpeedModRadius");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_AI_BaseNPC::m_iSpeedModSpeed( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_iSpeedModSpeed");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_AI_BaseNPC::m_lifeState( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_AI_BaseNPC", "m_lifeState");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
