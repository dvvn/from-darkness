#include "C_LightGlow.h"

#include "cheat/core/netvars.h"

using namespace cheat;
using namespace csgo;

utl::Color& C_LightGlow::m_clrRender( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_clrRender");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Color>( );
}
int32_t& C_LightGlow::m_nHorizontalSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_nHorizontalSize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_LightGlow::m_nVerticalSize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_nVerticalSize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_LightGlow::m_nMinDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_nMinDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_LightGlow::m_nMaxDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_nMaxDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_LightGlow::m_nOuterMaxDist( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_nOuterMaxDist");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
int32_t& C_LightGlow::m_spawnflags( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_spawnflags");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
utl::Vector& C_LightGlow::m_vecOrigin( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_vecOrigin");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::Vector>( );
}
utl::QAngle& C_LightGlow::m_angRotation( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_angRotation");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<utl::QAngle>( );
}
int32_t& C_LightGlow::moveparent( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.moveparent");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<int32_t>( );
}
float& C_LightGlow::m_flGlowProxySize( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.m_flGlowProxySize");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
float& C_LightGlow::HDRColorScale( )
{
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow.HDRColorScale");
	auto addr = utl::mem::address(this).add(offset);
	return addr.ref<float>( );
}
