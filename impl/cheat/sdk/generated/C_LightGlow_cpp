#include "C_LightGlow.h"

using namespace cheat;
using namespace csgo;

float& C_LightGlow::HDRColorScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "HDRColorScale");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
QAngle& C_LightGlow::m_angRotation( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(QAngle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_angRotation");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<QAngle>( );
#endif
}
Color& C_LightGlow::m_clrRender( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Color*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_clrRender");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Color>( );
#endif
}
float& C_LightGlow::m_flGlowProxySize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_flGlowProxySize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_LightGlow::m_nHorizontalSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_nHorizontalSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_LightGlow::m_nMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_nMaxDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_LightGlow::m_nMinDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_nMinDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_LightGlow::m_nOuterMaxDist( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_nOuterMaxDist");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_LightGlow::m_nVerticalSize( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_nVerticalSize");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_LightGlow::m_spawnflags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_spawnflags");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
Vector& C_LightGlow::m_vecOrigin( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "m_vecOrigin");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
int32_t& C_LightGlow::moveparent( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_LightGlow", "moveparent");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
