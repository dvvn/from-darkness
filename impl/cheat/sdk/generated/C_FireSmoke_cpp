#include "C_FireSmoke.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

float& C_FireSmoke::m_flStartScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_flStartScale");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_FireSmoke::m_flScale( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_flScale");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
float& C_FireSmoke::m_flScaleTime( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(float*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_flScaleTime");
	auto addr = utl::address(this).add(offset);
	return addr.ref<float>( );
#endif
}
int32_t& C_FireSmoke::m_nFlags( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_nFlags");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_FireSmoke::m_nFlameModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_nFlameModelIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
int32_t& C_FireSmoke::m_nFlameFromAboveModelIndex( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_FireSmoke.m_nFlameFromAboveModelIndex");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
