#include "C_PropVehicleChoreoGeneric.h"
#include "cheat/netvars/config.h"
#ifndef CHEAT_NETVARS_UPDATING
#include "cheat/netvars/netvars.h"
#include <nstd/address.h>
#endif

#include "cheat/sdk/CBaseHandle.hpp"
#include "cheat/sdk/Vector.hpp"

using namespace cheat;
using namespace csgo;

bool& C_PropVehicleChoreoGeneric::m_bEnterAnimOn( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric", "m_bEnterAnimOn");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_PropVehicleChoreoGeneric::m_bExitAnimOn( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric", "m_bExitAnimOn");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_PropVehicleChoreoGeneric::m_bForceEyesToAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric", "m_bForceEyesToAttachment");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
CBaseHandle& C_PropVehicleChoreoGeneric::m_hPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(CBaseHandle*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric", "m_hPlayer");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<CBaseHandle>( );
#endif
}
Vector& C_PropVehicleChoreoGeneric::m_vecEyeExitEndpoint( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric", "m_vecEyeExitEndpoint");
	auto addr = nstd::address(this).add(offset);
	return addr.ref<Vector>( );
#endif
}
