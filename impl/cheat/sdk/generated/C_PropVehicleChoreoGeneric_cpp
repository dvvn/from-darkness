#include "C_PropVehicleChoreoGeneric.h"

#include "cheat/netvars/netvars.h"

using namespace cheat;
using namespace csgo;

int32_t& C_PropVehicleChoreoGeneric::m_hPlayer( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(int32_t*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric.m_hPlayer");
	auto addr = utl::address(this).add(offset);
	return addr.ref<int32_t>( );
#endif
}
bool& C_PropVehicleChoreoGeneric::m_bEnterAnimOn( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric.m_bEnterAnimOn");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_PropVehicleChoreoGeneric::m_bExitAnimOn( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric.m_bExitAnimOn");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
bool& C_PropVehicleChoreoGeneric::m_bForceEyesToAttachment( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(bool*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric.m_bForceEyesToAttachment");
	auto addr = utl::address(this).add(offset);
	return addr.ref<bool>( );
#endif
}
utl::Vector& C_PropVehicleChoreoGeneric::m_vecEyeExitEndpoint( )
{
#ifdef CHEAT_NETVARS_UPDATING
	return *(utl::Vector*)nullptr;
#else
	static const auto offset = netvars::get_ptr( )->at("C_PropVehicleChoreoGeneric.m_vecEyeExitEndpoint");
	auto addr = utl::address(this).add(offset);
	return addr.ref<utl::Vector>( );
#endif
}
